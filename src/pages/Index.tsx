import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import AnimatedLanguage from "@/components/AnimatedLanguage";
import { 
  GraduationCap, 
  Users, 
  MapPin, 
  Star, 
  CheckCircle, 
  ArrowRight,
  Play,
  MessageCircle,
  TestTube,
  UserCheck,
  Award,
  BookOpen,
  Target,
  Clock,
  Phone,
  Send,
  Video,
  Heart,
  BookMarked,
  Calendar,
  Globe,
  Laptop,
  Languages
} from "lucide-react";

const branches = [
  { 
    name: "–ö–æ—Ç–µ–ª—å–Ω–∏–∫–∏", 
    address: "2-–π –ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 14–∫2", 
    slug: "kotelniki",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 12,
    nextGroup: "–ó–∞–≤—Ç—Ä–∞ 18:00"
  },
  { 
    name: "–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ", 
    address: "–†–µ—É—Ç–æ–≤, –Æ–±–∏–ª–µ–π–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 60", 
    slug: "novokosino",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 8,
    nextGroup: "–°–µ–≥–æ–¥–Ω—è 19:30"
  },
  { 
    name: "–û–∫—Å–∫–∞—è/–ö—É–∑—å–º–∏–Ω–∫–∏/–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏", 
    address: "—É–ª. –û–∫—Å–∫–∞—è, –¥. 3, –∫–æ—Ä–ø. 1", 
    slug: "okskaya",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 10,
    nextGroup: "–ó–∞–≤—Ç—Ä–∞ 17:00"
  },
  { 
    name: "–°—Ç–∞—Ö–∞–Ω–æ–≤—Å–∫–∞—è", 
    address: "2-–π –ì—Ä–∞–π–≤–æ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä-–¥, 42–∫1", 
    slug: "stakhanovskaya",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 15,
    nextGroup: "–°–µ–≥–æ–¥–Ω—è 18:30"
  },
  { 
    name: "–°–æ–ª–Ω—Ü–µ–≤–æ", 
    address: "—É–ª. –ë–æ–≥–¥–∞–Ω–æ–≤–∞, 6–∫1", 
    slug: "solntsevo",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 9,
    nextGroup: "–ó–∞–≤—Ç—Ä–∞ 16:00"
  },
  { 
    name: "–ú—ã—Ç–∏—â–∏", 
    address: "—É–ª. –ë–æ—Ä–∏—Å–æ–≤–∫–∞, 16–ê", 
    slug: "mytishchi",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 11,
    nextGroup: "–°–µ–≥–æ–¥–Ω—è 17:30"
  },
  { 
    name: "–õ—é–±–µ—Ä—Ü—ã", 
    address: "3 –ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, 65–∫1", 
    slug: "lyubertsy-1",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 7,
    nextGroup: "–ó–∞–≤—Ç—Ä–∞ 19:00"
  },
  { 
    name: "–ö—Ä–∞—Å–Ω–∞—è –ì–æ—Ä–∫–∞", 
    address: "–ø—Ä–æ—Å–ø–µ–∫—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞, 3/8", 
    slug: "lyubertsy-2",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    activeGroups: 13,
    nextGroup: "–°–µ–≥–æ–¥–Ω—è 20:00"
  },
  { 
    name: "–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞", 
    address: "Cambridge One –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", 
    slug: "online",
    workingHours: "24/7 –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º",
    activeGroups: 25,
    nextGroup: "–ö–∞–∂–¥—ã–π —á–∞—Å"
  },
];

const advantages = [
  {
    icon: Star,
    title: "–û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –Ω–æ—Å–∏—Ç–µ–ª–∏",
    text: "–£—á–∏—Ç–µ–ª—è —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º."
  },
  {
    icon: BookMarked,
    title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    text: "–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ–±–Ω–∏–∫–∏ Cambridge –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã."
  },
  {
    icon: Heart,
    title: "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    text: "–ú–æ—Ç–∏–≤–∏—Ä—É–µ–º, —Å–æ–∑–¥–∞—ë–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–æ–º–æ–≥–∞–µ–º –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è."
  },
  {
    icon: MessageCircle,
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è",
    text: "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã, –ø—Ä–æ–µ–∫—Ç—ã, –¥–∏—Å–∫—É—Å—Å–∏–∏ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–ª—É–±—ã."
  },
  {
    icon: Calendar,
    title: "–£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    text: "–§–∏–ª–∏–∞–ª—ã —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º –∏ –∑–∞–Ω—è—Ç–∏—è –æ–Ω–ª–∞–π–Ω."
  },
  {
    icon: BookMarked,
    title: "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    text: "–û–±—É—á–µ–Ω–∏–µ –≤ O'KEY ENGLISH —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
  },
  {
    icon: Star,
    title: "–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è Cambridge",
    text: "–° 2019 –≥–æ–¥–∞ O'KEY ENGLISH –ø–æ–ª—É—á–∏–ª –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é Cambridge –≤ —Å–≤—è–∑–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤."
  },
  {
    icon: Heart,
    title: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª",
    text: "–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π —Å –≥–æ—Å.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
  },
  {
    icon: Star,
    title: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    text: "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, —á—Ç–æ–±—ã –æ—â—É—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–∏—á–Ω–æ",
    isHighlighted: true
  }
];

const languages = [
  { name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", icon: "üá¨üáß" },
  { name: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", icon: "üá´üá∑" },
  { name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π", icon: "üá™üá∏" },
  { name: "–†—É—Å—Å–∫–∏–π", icon: "üá∑üá∫" },
  { name: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", icon: "üáÆüáπ" },
  { name: "–ì—Ä–µ—á–µ—Å–∫–∏–π", icon: "üá¨üá∑" },
  { name: "–ò–≤—Ä–∏—Ç", icon: "üáÆüá±" },
  { name: "10+", icon: "üåç" }
];

interface ScheduleItem {
  id: string;
  name: string;
  office_name: string;
  level: string;
  compact_days: string;
  compact_time: string;
  compact_classroom: string;
  compact_teacher: string;
  "–í–æ–∑—Ä–∞—Å—Ç": string;
  vacancies: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface BranchWithSchedule {
  name: string;
  address: string;
  slug: string;
  workingHours: string;
  activeGroups: number;
  nextGroup: string;
  availableSpots: number;
}

export default function Index() {
  const [quizStep] = useState(0);
  const [showQuizResult] = useState(false);
  const [branchesWithSchedule, setBranchesWithSchedule] = useState<BranchWithSchedule[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchScheduleData();
  }, []);

  const fetchScheduleData = async () => {
    try {
      // Fetch all schedules in one call using nullable parameter to avoid overloading ambiguity
      const { data: allScheduleData, error: scheduleError } = await supabase.rpc('get_public_schedule', {
        branch_name: null
      });

      if (scheduleError) {
        console.error('Error fetching schedule:', scheduleError);
        // Fallback to original hardcoded data
        setBranchesWithSchedule(branches.map(branch => ({
          ...branch,
          availableSpots: 3
        })));
        setIsLoading(false);
        return;
      }

      console.log('Fetched schedule data:', allScheduleData);
      console.log('All group IDs:', allScheduleData?.map(s => s.id));
      console.log('Okskaya groups:', allScheduleData?.filter(s => s.office_name === '–û–∫—Å–∫–∞—è').map(s => ({
        id: s.id,
        name: s.name,
        days: s.compact_days,
        time: s.compact_time
      })));

      // Process schedule data and merge with branch info
      const normalize = (s: string) => s?.toLowerCase().trim();
      const getMatchingNames = (displayName: string): string[] => {
        switch (displayName) {
          case '–õ—é–±–µ—Ä—Ü—ã':
            return ['–õ—é–±–µ—Ä—Ü—ã', '–õ—é–±–µ—Ä—Ü—ã/–ñ—É–ª–µ–±–∏–Ω–æ'];
          case '–ö—Ä–∞—Å–Ω–∞—è –ì–æ—Ä–∫–∞':
            return ['–ö—Ä–∞—Å–Ω–∞—è –ì–æ—Ä–∫–∞', '–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞', '–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞/–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞'];
          case '–û–∫—Å–∫–∞—è/–ö—É–∑—å–º–∏–Ω–∫–∏/–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏':
            return ['–û–∫—Å–∫–∞—è'];
          case '–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞':
            return ['–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞', '–û–Ω–ª–∞–π–Ω', 'Online'];
          default:
            return [displayName];
        }
      };

      const processedBranches = branches.map(branch => {
        const matchNames = getMatchingNames(branch.name).map(normalize);
        const branchSchedules = (allScheduleData || []).filter((schedule: ScheduleItem) => 
          matchNames.includes(normalize(schedule.office_name))
        );

        if (branch.name === '–û–∫—Å–∫–∞—è/–ö—É–∑—å–º–∏–Ω–∫–∏/–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏') {
          console.log('=== OKSKAYA FILTERING ===');
          console.log('Filtered schedules:', branchSchedules.length);
          console.log('Detailed filter check:');
          (allScheduleData || []).forEach(schedule => {
            const normalized = normalize(schedule.office_name);
            const isMatch = matchNames.includes(normalized);
            console.log(`  ${schedule.office_name} -> ${normalized} -> match: ${isMatch}`);
          });
        }

        console.log(`\n=== Processing branch: ${branch.name} ===`);
        console.log('Match names:', matchNames);
        
        if (branch.name === '–û–∫—Å–∫–∞—è/–ö—É–∑—å–º–∏–Ω–∫–∏/–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏') {
          console.log('=== DEBUGGING OKSKAYA ===');
          console.log('All schedule data:', allScheduleData?.map(s => s.office_name));
          console.log('Looking for matches with:', matchNames);
          console.log('Searching for group 20744:', allScheduleData?.find(s => s.id === '20744'));
          const today = new Date().getDay(); // 0=Sunday, 1=Monday, ..., 5=Friday
          console.log('Today is day:', today, ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][today]);
        }
        console.log('Found schedules:', branchSchedules.length);
        console.log('Schedule details:', branchSchedules.map(s => ({
          name: s.name,
          office: s.office_name,
          days: s.compact_days,
          time: s.compact_time,
          vacancies: s.vacancies
        })));

        const activeGroups = branchSchedules.length;
        const totalVacancies = branchSchedules.reduce((sum: number, schedule: ScheduleItem) => 
          sum + schedule.vacancies, 0
        );

        console.log(`Branch ${branch.name}: ${activeGroups} groups, ${totalVacancies} total vacancies`);

        // Helper function to generate fallback schedule when no data available
        const generateFallbackSchedule = (): string => {
          const now = new Date();
          const currentHour = now.getHours();
          const currentMinute = now.getMinutes();
          
          // If after 21:30, show tomorrow at 09:00
          if (currentHour > 21 || (currentHour === 21 && currentMinute >= 30)) {
            return "–ó–∞–≤—Ç—Ä–∞ –≤ 09:00";
          }
          
          // Add 30 minutes to current time
          const futureTime = new Date(now.getTime() + 30 * 60 * 1000);
          let futureHour = futureTime.getHours();
          let futureMinute = futureTime.getMinutes();
          
          // Round to nearest :00 or :50
          if (futureMinute >= 0 && futureMinute <= 24) {
            // Round to :00 of same hour
            futureMinute = 0;
          } else if (futureMinute >= 25 && futureMinute <= 49) {
            // Round to :50 of same hour
            futureMinute = 50;
          } else {
            // Round to :00 of next hour
            futureHour = futureHour + 1;
            futureMinute = 0;
            
            // Handle hour overflow
            if (futureHour >= 24) {
              futureHour = 0;
            }
          }
          
          // Format time as HH:MM
          const timeString = `${futureHour.toString().padStart(2, "0")}:${futureMinute.toString().padStart(2, "0")}`;
          
          return `–°–µ–≥–æ–¥–Ω—è –≤ ${timeString}`;
        };

        // Helpers: parse days and compute next occurrence
        const parseDays = (daysStr: string): number[] => {
          const tokens = daysStr.toLowerCase().split('/').map(d => d.trim());
          const map: Record<string, number> = { '–≤—Å': 0, '–ø–Ω': 1, '–≤—Ç': 2, '—Å—Ä': 3, '—á—Ç': 4, '–ø—Ç': 5, '—Å–±': 6 };
          const result: number[] = [];
          for (const t of tokens) {
            if (map[t] !== undefined) result.push(map[t]);
          }
          return result;
        };

        const getNextOccurrence = (schedule: ScheduleItem): { date: Date; daysDiff: number; timeStart: string } | null => {
          const timeStart = schedule.compact_time.split('-')[0];
          const [hh, mm] = timeStart.split(':').map(Number);
          const days = parseDays(schedule.compact_days);
          if (!days.length || isNaN(hh) || isNaN(mm)) return null;

          const now = new Date();
          for (let i = 0; i < 7; i++) {
            const d = new Date(now);
            d.setDate(now.getDate() + i);
            if (days.includes(d.getDay())) {
              d.setHours(hh, mm, 0, 0);
              if (i > 0 || d.getTime() > now.getTime()) {
                return { date: d, daysDiff: i, timeStart };
              }
            }
          }
          return null;
        };

        const formatFromOccurrence = (occ: { daysDiff: number; timeStart: string } | null): string => {
          if (!occ) return generateFallbackSchedule();
          if (occ.daysDiff === 0) return `–°–µ–≥–æ–¥–Ω—è –≤ ${occ.timeStart}`;
          if (occ.daysDiff === 1) return `–ó–∞–≤—Ç—Ä–∞ –≤ ${occ.timeStart}`;
          return '–ó–∞–≤—Ç—Ä–∞ –≤ 10:00';
        };

        // Compute earliest upcoming time (prefer groups with vacancies > 0)
        const withVacancies = branchSchedules.filter(s => (s.vacancies || 0) > 0);
        const candidates = withVacancies.length ? withVacancies : branchSchedules;
        let bestOcc: { date: Date; daysDiff: number; timeStart: string } | null = null;
        for (const s of candidates) {
          const occ = getNextOccurrence(s);
          if (!occ) continue;
          if (!bestOcc || occ.date.getTime() < bestOcc.date.getTime()) {
            bestOcc = occ;
          }
        }

        const nextGroup = formatFromOccurrence(bestOcc);

        // Show at least 1 spot available if there are active groups but database shows 0
        const availableSpots = totalVacancies > 0 
          ? totalVacancies 
          : activeGroups > 0 
            ? 1 // Show minimum 1 spot if groups exist but database shows 0
            : 3; // Default fallback

        return {
          ...branch,
          activeGroups: Math.max(activeGroups, 30), // Show minimum 30 groups
          nextGroup,
          availableSpots
        };
      });

      setBranchesWithSchedule(processedBranches);
    } catch (error) {
      console.error('Error processing schedule data:', error);
      // Fallback to original data
      setBranchesWithSchedule(branches.map(branch => ({
        ...branch,
        availableSpots: 3
      })));
    } finally {
      setIsLoading(false);
    }
  };

  const handleWhatsApp = (branch?: string) => {
    const message = branch 
      ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª–µ ${branch}.`
      : "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É.";
    window.open(`https://wa.me/79937073553?text=${encodeURIComponent(message)}`, "_blank");
  };

  return (
    <div className="min-h-screen">
      <section className="relative bg-gradient-subtle py-20 lg:py-32 overflow-hidden">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold mb-6">
              <span className="inline-flex items-baseline justify-center gap-2">
                <AnimatedLanguage />
              </span>
              <br />
              –¥–ª—è –¥–µ—Ç–µ–π, –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö
            </h1>
            <p className="text-xl lg:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto">
              —Å <strong className="text-primary">–≥–∞—Ä–∞–Ω—Ç–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</strong>
            </p>
            <p className="text-lg text-muted-foreground mb-12 max-w-2xl mx-auto">
              –ü–æ–¥–±–µ—Ä—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã. –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-16 px-4">
              <Link to="/test" className="w-full sm:w-auto">
                <Button variant="hero" size="lg" className="flex items-center justify-center gap-2 w-full sm:w-auto">
                  <BookOpen className="w-5 h-5" />
                  –ü—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è
                </Button>
              </Link>
              <Link to="/contacts" className="w-full sm:w-auto">
                <Button variant="outline" size="lg" className="flex items-center justify-center gap-2 w-full sm:w-auto">
                  <UserCheck className="w-5 h-5" />
                  –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
                </Button>
              </Link>
            </div>

            <div className="flex flex-wrap justify-center items-center gap-6 text-center">
              <div className="flex items-center gap-3 p-4 bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 hover-scale">
                <div className="w-14 h-14 bg-gradient-primary rounded-full flex items-center justify-center shadow-lg">
                  <Award className="w-7 h-7 text-white" />
                </div>
                <div>
                  <div className="text-3xl font-black text-primary drop-shadow-lg">10 –ª–µ—Ç</div>
                  <div className="text-sm text-primary/80 font-medium">–Ω–∞ —Ä—ã–Ω–∫–µ</div>
                </div>
              </div>
              <div className="flex items-center gap-3 p-4 bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 hover-scale">
                <div className="w-14 h-14 bg-gradient-primary rounded-full flex items-center justify-center shadow-lg">
                  <GraduationCap className="w-7 h-7 text-white" />
                </div>
                <div>
                  <div className="text-3xl font-black text-primary drop-shadow-lg">10000+</div>
                  <div className="text-sm text-primary/80 font-medium">–≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤</div>
                </div>
              </div>
              <div className="flex items-center gap-3 p-4 bg-white/10 backdrop-blur-sm rounded-lg border border-white/20 hover-scale">
                <div className="w-14 h-14 bg-gradient-primary rounded-full flex items-center justify-center shadow-lg">
                  <BookOpen className="w-7 h-7 text-white" />
                </div>
                <div>
                  <div className="text-3xl font-black text-primary drop-shadow-lg">10+</div>
                  <div className="text-sm text-primary/80 font-medium">—è–∑—ã–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞—ë–º</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Our Advantages */}
      <section className="py-20 bg-secondary/20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl md:text-4xl font-bold text-center mb-12">–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {advantages.map((advantage, index) => (
              <Card key={index} className={`text-center hover:shadow-lg transition-shadow ${
                advantage.isHighlighted ? 'bg-gradient-primary text-white' : ''
              }`}>
                <CardContent className="p-6">
                  <advantage.icon className={`w-12 h-12 mx-auto mb-4 ${
                    advantage.isHighlighted ? 'text-white' : 'text-primary'
                  }`} />
                  <h3 className={`text-xl font-semibold mb-3 ${
                    advantage.isHighlighted ? 'text-white' : ''
                  }`}>{advantage.title}</h3>
                  <p className={advantage.isHighlighted ? 'text-white/90' : 'text-muted-foreground'}>
                    {advantage.text}
                  </p>
                  {advantage.isHighlighted && (
                    <Link to="/contacts" className="inline-block mt-4">
                      <Button 
                        variant="secondary"
                        className="bg-white text-primary hover:bg-white/90"
                      >
                        –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                      </Button>
                    </Link>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section className="py-20 bg-background">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl lg:text-4xl font-bold mb-4">
              –§–∏–ª–∏–∞–ª—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            </h2>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto mb-8">
              8 —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ —É–¥–æ–±–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö + –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞. –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            </p>
            
            <div className="flex flex-wrap justify-center gap-4">
              <Badge variant="outline" className="px-4 py-2">
                <MapPin className="w-4 h-4 mr-2" />
                8 —Ñ–∏–ª–∏–∞–ª–æ–≤
              </Badge>
              <Badge variant="outline" className="px-4 py-2">
                <Users className="w-4 h-4 mr-2" />
                110+ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
              </Badge>
              <Badge variant="outline" className="px-4 py-2">
                <Clock className="w-4 h-4 mr-2" />
                –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
              </Badge>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {isLoading ? (
              // Loading skeleton
              Array.from({ length: 8 }).map((_, index) => (
                <Card key={index} className="card-elevated overflow-hidden">
                  <div className="aspect-[16/9] bg-muted animate-pulse"></div>
                  <CardContent className="p-6 space-y-4">
                    <div className="h-6 bg-muted animate-pulse rounded"></div>
                    <div className="h-4 bg-muted animate-pulse rounded w-3/4"></div>
                    <div className="h-20 bg-muted animate-pulse rounded"></div>
                  </CardContent>
                </Card>
              ))
            ) : (
              branchesWithSchedule.map((branch) => (
                <Card key={branch.slug} className="card-elevated hover:border-primary/50 transition-all overflow-hidden">
                  <div className="aspect-[16/9] bg-gradient-subtle flex items-center justify-center">
                    <span className="text-muted-foreground">–§–æ—Ç–æ —Ñ–∏–ª–∏–∞–ª–∞ {branch.name}</span>
                  </div>
                  
                  <CardContent className="p-6 space-y-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <div className="flex items-center gap-2">
                          <MapPin className="w-5 h-5 text-primary" />
                          <h3 className="font-semibold text-xl">{branch.name}</h3>
                        </div>
                        <p className="text-sm text-muted-foreground mt-2">{branch.address}</p>
                      </div>
                      <Badge className="bg-gradient-primary text-white">
                        {branch.activeGroups} –≥—Ä—É–ø–ø
                      </Badge>
                    </div>

                    {/* Working Hours */}
                    <div className="flex items-center gap-2 text-sm">
                      <Clock className="w-4 h-4 text-primary" />
                      <span>{branch.workingHours}</span>
                    </div>

                    {/* Available Languages */}
                    <div>
                      <h4 className="font-semibold mb-3">–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</h4>
                      <div className="flex flex-wrap gap-2">
                        {languages.map((language, index) => (
                          <div key={index} className="flex items-center gap-1 bg-muted px-2 py-1 rounded-full text-xs">
                            <span className="text-sm">{language.icon}</span>
                            <span>{language.name}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Next Group */}
                    <div className="bg-gradient-subtle p-4 rounded-lg">
                      <div className="flex justify-between items-center">
                        <div>
                          <div className="text-sm text-muted-foreground">–ë–ª–∏–∂–∞–π—à–∞—è –≥—Ä—É–ø–ø–∞:</div>
                          <div className="font-medium">{branch.nextGroup}</div>
                        </div>
                        <div className="text-right">
                          <div className="text-sm text-muted-foreground">–°–≤–æ–±–æ–¥–Ω–æ:</div>
                          <div className="text-primary font-semibold">
                            {branch.availableSpots} {branch.availableSpots === 1 ? '–º–µ—Å—Ç–æ' : branch.availableSpots < 5 ? '–º–µ—Å—Ç–∞' : '–º–µ—Å—Ç'}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex flex-col gap-3">
                      <Link to={`/branches/${branch.slug}`}>
                        <Button variant="hero" className="w-full">
                          <ArrowRight className="w-4 h-4 mr-2" />
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª–∏–∞–ª–µ
                        </Button>
                      </Link>
                      
                      <div className="flex justify-center gap-3">
                        <Button 
                          variant="outline" 
                          size="icon"
                          onClick={() => window.open("tel:+74997073535", "_blank")}
                          className="rounded-full"
                        >
                          <Phone className="w-4 h-4" />
                        </Button>
                        <Button 
                          variant="outline" 
                          size="icon"
                          onClick={() => handleWhatsApp(branch.name)}
                          className="rounded-full"
                        >
                          <MessageCircle className="w-4 h-4" />
                        </Button>
                        <Button 
                          variant="outline" 
                          size="icon"
                          onClick={() => {
                            const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª–µ ${branch.name}.`;
                            window.open(`https://t.me/okeyenglish_bot?start=${encodeURIComponent(message)}`, "_blank");
                          }}
                          className="rounded-full"
                        >
                          <Send className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </div>
      </section>

      <section className="py-20 bg-primary">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl lg:text-4xl font-bold text-white mb-4">
            –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?
          </h2>
          <p className="text-xl text-white/90 mb-8 max-w-2xl mx-auto">
            –ü—Ä–æ–π–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
          </p>
        </div>
      </section>
    </div>
  );
}