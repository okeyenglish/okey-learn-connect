import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { 
  BookOpen, 
  Download, 
  FolderOpen, 
  Play, 
  Clock, 
  Users, 
  CheckCircle,
  ChevronDown,
  ExternalLink,
  FileText,
  Music,
  Video,
  Gamepad2,
  Target,
  Award,
  MessageCircle,
  Search,
  Home,
  Brain,
  Zap,
  Star,
  Trophy,
  RotateCcw,
  Volume2
} from "lucide-react";
import SEOHead from "@/components/SEOHead";
import { CourseMaterialsLibrary } from "@/components/student/CourseMaterialsLibrary";

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
const courses = [
  { id: "super-safari-1", name: "Super Safari 1" },
  { id: "super-safari-2", name: "Super Safari 2" },
  { id: "super-safari-3", name: "Super Safari 3" },
  { id: "kids-box-starter", name: "Kid's Box Starter" },
  { id: "kids-box-1", name: "Kid's Box 1" },
  { id: "kids-box-2", name: "Kid's Box 2" },
  { id: "kids-box-3-4", name: "Kid's Box 3+4" },
  { id: "kids-box-5", name: "Kid's Box 5" },
  { id: "kids-box-6", name: "Kid's Box 6" },
  { id: "prepare-1", name: "Prepare 1" },
  { id: "prepare-2", name: "Prepare 2" },
  { id: "prepare-3", name: "Prepare 3" },
  { id: "prepare-4", name: "Prepare 4" },
  { id: "prepare-5", name: "Prepare 5" },
  { id: "prepare-6", name: "Prepare 6" },
  { id: "prepare-7", name: "Prepare 7" },
  { id: "empower-1", name: "Empower 1" },
  { id: "empower-2", name: "Empower 2" },
  { id: "empower-3", name: "Empower 3" },
  { id: "empower-4", name: "Empower 4" },
  { id: "empower-5", name: "Empower 5" },
  { id: "empower-6", name: "Empower 6" }
];

// –î–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å–∞–º
const courseData = {
  "kids-box-1": {
    title: "Kid's Box 1",
    description: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –¥–µ—Ç–µ–π 6-8 –ª–µ—Ç",
    units: [
      {
        id: 1,
        title: "Unit 1 ‚Äî Hello!",
        description: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Å–µ–º—å–µ–π Star, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–µ–¥–ª–æ–≥–∏ –º–µ—Å—Ç–∞",
        color: "bg-blue-50 border-blue-200",
        lessons: 7,
        vocabulary: "–°–µ–º—å—è, —á–∏—Å–ª–∞, —Ü–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–≥–∏ in/on/under",
        grammar: "What's your name? How old are you? Where is‚Ä¶?"
      },
      {
        id: 2,
        title: "Unit 2 ‚Äî My school",
        description: "–®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —á–∏—Å–ª–∞ 11-20, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        color: "bg-green-50 border-green-200", 
        lessons: 7,
        vocabulary: "–®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —á–∏—Å–ª–∞ 11-20, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        grammar: "This is a... I have got... What day is it?"
      },
      {
        id: 3,
        title: "Unit 3 ‚Äî Favourite toys",
        description: "–ò–≥—Ä—É—à–∫–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è",
        color: "bg-purple-50 border-purple-200",
        lessons: 7,
        vocabulary: "–ò–≥—Ä—É—à–∫–∏, —Ü–≤–µ—Ç–∞, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ big/small",
        grammar: "I like/don't like, –ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ"
      },
      {
        id: 4,
        title: "Unit 4 ‚Äî My family",
        description: "–°–µ–º—å—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è",
        color: "bg-red-50 border-red-200",
        lessons: 7,
        vocabulary: "–ß–ª–µ–Ω—ã —Å–µ–º—å–∏, –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –º–µ—Å—è—Ü—ã",
        grammar: "–ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–π 's, When's your birthday?"
      },
      {
        id: 5,
        title: "Unit 5 ‚Äî Our pet",
        description: "–ü–∏—Ç–æ–º—Ü—ã, —É—Ö–æ–¥, –µ–¥–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
        color: "bg-yellow-50 border-yellow-200",
        lessons: 7,
        vocabulary: "–ñ–∏–≤–æ—Ç–Ω—ã–µ, –µ–¥–∞, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è",
        grammar: "Have got/has got"
      },
      {
        id: 6,
        title: "Unit 6 ‚Äî My face",
        description: "–ß–∞—Å—Ç–∏ —Ç–µ–ª–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏—è –ª—é–¥–µ–π",
        color: "bg-pink-50 border-pink-200",
        lessons: 6,
        vocabulary: "–ß–∞—Å—Ç–∏ –ª–∏—Ü–∞, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
        grammar: "Have got (–≤–Ω–µ—à–Ω–æ—Å—Ç—å), –æ–ø–∏—Å–∞–Ω–∏—è"
      }
    ],
    materials: [
      {
        name: "Pupil's Book",
        description: "–û—Å–Ω–æ–≤–Ω–æ–π —É—á–µ–±–Ω–∏–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–∞",
        icon: BookOpen
      },
      {
        name: "Activity Book", 
        description: "–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏",
        icon: FileText
      },
      {
        name: "Teacher's Book",
        description: "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–æ–±–∏–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è", 
        icon: Users
      },
      {
        name: "–ê—É–¥–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        description: "–ü–µ—Å–Ω–∏, –∏—Å—Ç–æ—Ä–∏–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª—É—Ö",
        icon: Music
      },
      {
        name: "–í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã", 
        description: "–û–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã",
        icon: Video
      },
      {
        name: "KB1 –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã",
        description: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        icon: Gamepad2
      }
    ]
  },
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–æ–≤ (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
  "super-safari-1": {
    title: "Super Safari 1",
    description: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö 3-5 –ª–µ—Ç",
    units: [
      {
        id: 1,
        title: "Unit 1 ‚Äî Hello, animals!",
        description: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏",
        color: "bg-green-50 border-green-200",
        lessons: 6,
        vocabulary: "–ñ–∏–≤–æ—Ç–Ω—ã–µ: cat, dog, bird, fish",
        grammar: "Hello! What's this?"
      }
    ],
    materials: [
      {
        name: "Pupil's Book",
        description: "–û—Å–Ω–æ–≤–Ω–æ–π —É—á–µ–±–Ω–∏–∫",
        icon: BookOpen
      }
    ]
  }
};

// –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
const trainers = [
  {
    id: "word-memory",
    title: "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ª–æ–≤",
    description: "–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç–æ—á–µ–∫",
    icon: Brain,
    color: "bg-blue-50 border-blue-200"
  },
  {
    id: "listening-game",
    title: "–ò–≥—Ä–∞ –Ω–∞ —Å–ª—É—Ö",
    description: "–°–ª—É—à–∞–π—Ç–µ –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
    icon: Volume2,
    color: "bg-green-50 border-green-200"
  },
  {
    id: "word-builder",
    title: "–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–ª–æ–≤",
    description: "–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ –±—É–∫–≤",
    icon: Zap,
    color: "bg-purple-50 border-purple-200"
  },
  {
    id: "grammar-quiz",
    title: "–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–∏–∑",
    description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
    icon: Target,
    color: "bg-orange-50 border-orange-200"
  }
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤
const WordMemoryTrainer = () => {
  const [currentWord, setCurrentWord] = useState(0);
  const [showTranslation, setShowTranslation] = useState(false);
  const [score, setScore] = useState(0);

  const words = [
    { english: "cat", translation: "–∫–æ—Ç", image: "üê±" },
    { english: "dog", translation: "—Å–æ–±–∞–∫–∞", image: "üê∂" },
    { english: "bird", translation: "–ø—Ç–∏—Ü–∞", image: "üê¶" },
    { english: "fish", translation: "—Ä—ã–±–∞", image: "üêü" },
    { english: "book", translation: "–∫–Ω–∏–≥–∞", image: "üìö" },
    { english: "pen", translation: "—Ä—É—á–∫–∞", image: "‚úèÔ∏è" }
  ];

  const nextWord = () => {
    setCurrentWord((prev) => (prev + 1) % words.length);
    setShowTranslation(false);
    setScore(prev => prev + 1);
  };

  const showAnswer = () => {
    setShowTranslation(true);
  };

  return (
    <Card className="max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5" />
          –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ª–æ–≤
        </CardTitle>
        <div className="flex justify-between text-sm text-muted-foreground">
          <span>–°–ª–æ–≤–æ {currentWord + 1} –∏–∑ {words.length}</span>
          <span>–û—á–∫–∏: {score}</span>
        </div>
      </CardHeader>
      <CardContent className="text-center space-y-6">
        <div className="text-6xl mb-4">
          {words[currentWord].image}
        </div>
        <div className="space-y-2">
          <h3 className="text-2xl font-bold text-primary">
            {words[currentWord].english}
          </h3>
          {showTranslation && (
            <p className="text-lg text-muted-foreground animate-in slide-in-from-bottom">
              {words[currentWord].translation}
            </p>
          )}
        </div>
        <div className="flex gap-2 justify-center">
          {!showTranslation ? (
            <Button onClick={showAnswer} variant="outline">
              –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥
            </Button>
          ) : (
            <Button onClick={nextWord} className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã –Ω–∞ —Å–ª—É—Ö
const ListeningGame = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  const questions = [
    {
      audio: "cat",
      options: ["cat", "dog", "bird", "fish"],
      correct: "cat",
      image: "üê±"
    },
    {
      audio: "dog", 
      options: ["cat", "dog", "bird", "fish"],
      correct: "dog",
      image: "üê∂"
    }
  ];

  const handleAnswer = (answer: string) => {
    setSelectedAnswer(answer);
    setShowResult(true);
    if (answer === questions[currentQuestion].correct) {
      setScore(prev => prev + 1);
    }
  };

  const nextQuestion = () => {
    setCurrentQuestion(prev => (prev + 1) % questions.length);
    setSelectedAnswer(null);
    setShowResult(false);
  };

  return (
    <Card className="max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Volume2 className="h-5 w-5" />
          –ò–≥—Ä–∞ –Ω–∞ —Å–ª—É—Ö
        </CardTitle>
        <div className="flex justify-between text-sm text-muted-foreground">
          <span>–í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}</span>
          <span>–û—á–∫–∏: {score}</span>
        </div>
      </CardHeader>
      <CardContent className="text-center space-y-6">
        <div className="text-6xl mb-4">
          {questions[currentQuestion].image}
        </div>
        
        <Button variant="outline" className="flex items-center gap-2">
          <Play className="h-4 w-4" />
          –ü—Ä–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ
        </Button>

        <div className="grid grid-cols-2 gap-2">
          {questions[currentQuestion].options.map((option) => (
            <Button
              key={option}
              variant={selectedAnswer === option ? "default" : "outline"}
              onClick={() => handleAnswer(option)}
              disabled={showResult}
              className={
                showResult && option === questions[currentQuestion].correct
                  ? "bg-green-100 border-green-300 text-green-800"
                  : showResult && selectedAnswer === option && option !== questions[currentQuestion].correct
                  ? "bg-red-100 border-red-300 text-red-800"
                  : ""
              }
            >
              {option}
            </Button>
          ))}
        </div>

        {showResult && (
          <div className="space-y-2">
            <p className={selectedAnswer === questions[currentQuestion].correct ? "text-green-600" : "text-red-600"}>
              {selectedAnswer === questions[currentQuestion].correct ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ" : "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî"}
            </p>
            <Button onClick={nextQuestion}>
              –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default function CourseDetails() {
  const [selectedCourse, setSelectedCourse] = useState("kids-box-1");
  const [searchLessonNumber, setSearchLessonNumber] = useState('');
  const [selectedLesson, setSelectedLesson] = useState<number | null>(null);
  const [openUnits, setOpenUnits] = useState<Record<number, boolean>>({});
  const [selectedTrainer, setSelectedTrainer] = useState<string | null>(null);

  const currentCourseData = courseData[selectedCourse as keyof typeof courseData] || courseData["kids-box-1"];

  const toggleUnit = (unitId: number) => {
    setOpenUnits(prev => ({
      ...prev,
      [unitId]: !prev[unitId]
    }));
  };

  const closeDialog = () => {
    setSelectedLesson(null);
  };

  const openTrainer = (trainerId: string) => {
    setSelectedTrainer(trainerId);
  };

  const closeTrainer = () => {
    setSelectedTrainer(null);
  };

  return (
    <>
      <SEOHead 
        title={`${currentCourseData.title} - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ | Okey English`}
        description={`–ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞ ${currentCourseData.title} —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞, —Ü–µ–ª—è–º–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–Ω—è—Ç–∏–π`}
        keywords={`${currentCourseData.title}, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –¥–µ—Ç–µ–π, Cambridge English, –º–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è`}
      />
      
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <section className="relative pt-20 pb-12 bg-gradient-to-r from-blue-600 to-purple-600 text-white overflow-hidden">
          <div className="absolute inset-0 bg-black/20"></div>
          
          <div className="relative container mx-auto px-4 text-center">
            <div className="max-w-4xl mx-auto">
              <h1 className="text-4xl md:text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-white to-blue-100">
                {currentCourseData.title} ‚Äî –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </h1>
              <p className="text-xl md:text-2xl text-blue-100 mb-8">
                {currentCourseData.description}
              </p>
              
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫—É—Ä—Å–æ–≤ */}
              <div className="max-w-md mx-auto">
                <Select value={selectedCourse} onValueChange={setSelectedCourse}>
                  <SelectTrigger className="w-full bg-white/10 border-white/20 text-white">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å" />
                  </SelectTrigger>
                  <SelectContent>
                    {courses.map((course) => (
                      <SelectItem key={course.id} value={course.id}>
                        {course.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        </section>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="container mx-auto px-4 py-12">
          <Tabs defaultValue="units" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-8">
              <TabsTrigger value="units" className="flex items-center gap-2">
                <BookOpen className="h-4 w-4" />
                –Æ–Ω–∏—Ç—ã
              </TabsTrigger>
              <TabsTrigger value="materials" className="flex items-center gap-2">
                <FolderOpen className="h-4 w-4" />
                –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
              </TabsTrigger>
              <TabsTrigger value="trainers" className="flex items-center gap-2">
                <Gamepad2 className="h-4 w-4" />
                –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã
              </TabsTrigger>
            </TabsList>

            {/* –Æ–Ω–∏—Ç—ã */}
            <TabsContent value="units" className="space-y-8">
              {/* –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤ */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Search className="h-5 w-5" />
                    –ü–æ–∏—Å–∫ —É—Ä–æ–∫–∞
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex gap-4 items-center">
                    <Input
                      type="number"
                      placeholder="–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ (1-80)"
                      value={searchLessonNumber}
                      onChange={(e) => setSearchLessonNumber(e.target.value)}
                      className="max-w-xs"
                    />
                    <Button onClick={() => console.log('Search lesson')}>
                      –ù–∞–π—Ç–∏ —É—Ä–æ–∫
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —é–Ω–∏—Ç–∞–º */}
              <div className="space-y-4">
                <h2 className="text-2xl font-bold text-center mb-6">–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —é–Ω–∏—Ç–∞–º</h2>
                {currentCourseData.units.map((unit) => (
                  <Collapsible
                    key={unit.id}
                    open={openUnits[unit.id]}
                    onOpenChange={() => toggleUnit(unit.id)}
                  >
                    <Card className={`${unit.color} transition-all hover:shadow-md`}>
                      <CollapsibleTrigger asChild>
                        <CardHeader className="cursor-pointer hover:bg-white/50 transition-colors">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4">
                              <Badge variant="secondary" className="text-sm">
                                {unit.lessons} —É—Ä–æ–∫–æ–≤
                              </Badge>
                              <div>
                                <CardTitle className="text-left">{unit.title}</CardTitle>
                                <p className="text-sm text-muted-foreground mt-1">
                                  {unit.description}
                                </p>
                              </div>
                            </div>
                            <ChevronDown className="h-5 w-5 transition-transform" />
                          </div>
                        </CardHeader>
                      </CollapsibleTrigger>
                      
                      <CollapsibleContent>
                        <CardContent className="pt-0">
                          <div className="grid md:grid-cols-2 gap-4">
                            <div>
                              <h4 className="font-semibold mb-2 flex items-center gap-2">
                                <MessageCircle className="h-4 w-4" />
                                –°–ª–æ–≤–∞—Ä—å
                              </h4>
                              <p className="text-sm text-muted-foreground">
                                {unit.vocabulary}
                              </p>
                            </div>
                            <div>
                              <h4 className="font-semibold mb-2 flex items-center gap-2">
                                <Target className="h-4 w-4" />
                                –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞
                              </h4>
                              <p className="text-sm text-muted-foreground">
                                {unit.grammar}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Card>
                  </Collapsible>
                ))}
              </div>
            </TabsContent>

            {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
            <TabsContent value="materials" className="space-y-8">
              <CourseMaterialsLibrary />
            </TabsContent>

            {/* –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã */}
            <TabsContent value="trainers" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold mb-4">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã</h2>
                <p className="text-muted-foreground">
                  –ò–∑—É—á–∞–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                </p>
              </div>

              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
                {trainers.map((trainer) => (
                  <Card 
                    key={trainer.id} 
                    className={`${trainer.color} cursor-pointer transition-all hover:shadow-lg hover:scale-105`}
                    onClick={() => openTrainer(trainer.id)}
                  >
                    <CardContent className="p-6 text-center">
                      <trainer.icon className="h-12 w-12 mx-auto mb-4 text-primary" />
                      <h3 className="font-semibold mb-2">{trainer.title}</h3>
                      <p className="text-sm text-muted-foreground">
                        {trainer.description}
                      </p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* –î–∏–∞–ª–æ–≥ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ */}
      <Dialog open={selectedTrainer !== null} onOpenChange={closeTrainer}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {selectedTrainer && trainers.find(t => t.id === selectedTrainer)?.title}
            </DialogTitle>
            <DialogDescription>
              {selectedTrainer && trainers.find(t => t.id === selectedTrainer)?.description}
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            {selectedTrainer === "word-memory" && <WordMemoryTrainer />}
            {selectedTrainer === "listening-game" && <ListeningGame />}
            {selectedTrainer === "word-builder" && (
              <div className="text-center py-8">
                <Zap className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
                <p className="text-muted-foreground">–¢—Ä–µ–Ω–∞–∂—ë—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
              </div>
            )}
            {selectedTrainer === "grammar-quiz" && (
              <div className="text-center py-8">
                <Target className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
                <p className="text-muted-foreground">–¢—Ä–µ–Ω–∞–∂—ë—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}