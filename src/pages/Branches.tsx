import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { supabase } from "@/integrations/supabase/client";
import novokosinoImage from "@/assets/novokosino-branch.jpg";
import kotelnikiImage from "@/assets/kotelniki-branch.jpg";
import okskayaImage from "@/assets/okskaya-branch.jpg";
import { 
  MapPin, 
  Clock, 
  Phone, 
  MessageCircle,
  Users,
  Star,
  UserCheck,
  ArrowRight,
  Send
} from "lucide-react";

interface ScheduleItem {
  id: string;
  name: string;
  office_name: string;
  level: string;
  compact_days: string;
  compact_time: string;
  compact_classroom: string;
  compact_teacher: string;
  group_URL?: string | null;
  "–í–æ–∑—Ä–∞—Å—Ç": string;
  vacancies: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface BranchWithSchedule {
  id: string;
  name: string;
  address: string;
  metro: string;
  workingHours: string;
  image: string;
  features: string[];
  activeGroups: number;
  nextGroup: string;
  availableSpots: number;
}

const languages = [
  { name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", icon: "üá¨üáß" },
  { name: "–ù–µ–º–µ—Ü–∫–∏–π", icon: "üá©üá™" },
  { name: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", icon: "üá´üá∑" },
  { name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π", icon: "üá™üá∏" },
  { name: "–†—É—Å—Å–∫–∏–π", icon: "üá∑üá∫" },
  { name: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", icon: "üáÆüáπ" },
  { name: "–ì—Ä–µ—á–µ—Å–∫–∏–π", icon: "üá¨üá∑" },
  { name: "–ò–≤—Ä–∏—Ç", icon: "üáÆüá±" },
  { name: "10+", icon: "üåç" }
];

const branches = [
  { 
    id: "kotelniki",
    name: "–ö–æ—Ç–µ–ª—å–Ω–∏–∫–∏", 
    address: "2-–π –ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 14–∫2",
    metro: "–ö–æ—Ç–µ–ª—å–Ω–∏–∫–∏",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: kotelnikiImage,
    features: ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å–∫–∏", "–î–µ—Ç—Å–∫–∞—è –∑–æ–Ω–∞"]
  },
  { 
    id: "novokosino",
    name: "–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ", 
    address: "–†–µ—É—Ç–æ–≤, –Æ–±–∏–ª–µ–π–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 60",
    metro: "–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: novokosinoImage,
    features: ["–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–µ –∫–ª–∞—Å—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ö–∞—Ñ–µ —Ä—è–¥–æ–º"]
  },
  { 
    id: "okskaya",
    name: "–û–∫—Å–∫–∞—è", 
    address: "—É–ª. –û–∫—Å–∫–∞—è, –¥. 3, –∫–æ—Ä–ø. 1",
    metro: "–û–∫—Å–∫–∞—è",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: okskayaImage,
    features: ["–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞"]
  },
  { 
    id: "stakhanovskaya",
    name: "–°—Ç–∞—Ö–∞–Ω–æ–≤—Å–∫–∞—è", 
    address: "2-–π –ì—Ä–∞–π–≤–æ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä-–¥, 42–∫1",
    metro: "–°—Ç–∞—Ö–∞–Ω–æ–≤—Å–∫–∞—è",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: "/placeholder-branch-4.jpg",
    features: ["–ù–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç", "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞", "–£–¥–æ–±–Ω—ã–π –ø–æ–¥—ä–µ–∑–¥"]
  },
  { 
    id: "solntsevo",
    name: "–°–æ–ª–Ω—Ü–µ–≤–æ", 
    address: "—É–ª. –ë–æ–≥–¥–∞–Ω–æ–≤–∞, 6–∫1",
    metro: "–°–æ–ª–Ω—Ü–µ–≤–æ",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: "/placeholder-branch-5.jpg",
    features: ["–ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã", "–£–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞", "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞"]
  },
  { 
    id: "mytishchi",
    name: "–ú—ã—Ç–∏—â–∏", 
    address: "—É–ª. –ë–æ—Ä–∏—Å–æ–≤–∫–∞, 16–ê",
    metro: "–ú—ã—Ç–∏—â–∏ (–ú–¶–î-1)",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: "/placeholder-branch-6.jpg",
    features: ["–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ", "–ë—É—Ñ–µ—Ç"]
  },
  { 
    id: "lyubertsy-1",
    name: "–õ—é–±–µ—Ä—Ü—ã", 
    address: "3 –ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, 65–∫1",
    metro: "–õ—é–±–µ—Ä—Ü—ã (–ú–¶–î-1)",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: "/placeholder-branch-7.jpg",
    features: ["–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞"]
  },
  { 
    id: "lyubertsy-2",
    name: "–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞", 
    address: "–ø—Ä–æ—Å–ø–µ–∫—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞, 3/8",
    metro: "–õ—é–±–µ—Ä—Ü—ã (–ú–¶–î-1)",
    workingHours: "–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00",
    image: "/placeholder-branch-8.jpg",
    features: ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"]
  },
  { 
    id: "online",
    name: "–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞", 
    address: "Cambridge One –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    metro: "–ü–æ –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç–µ",
    workingHours: "24/7 –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º",
    image: "/placeholder-online.jpg",
    features: ["Cambridge One", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏", "–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
  }
];

export default function Locations() {
  const [branchesWithSchedule, setBranchesWithSchedule] = useState<BranchWithSchedule[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchScheduleData();
  }, []);

  const fetchScheduleData = async () => {
    try {
      const { data: allScheduleData, error: scheduleError } = await supabase.rpc('get_public_schedule', {
        branch_name: null
      });

      if (scheduleError) {
        console.error('Error fetching schedule:', scheduleError);
        setBranchesWithSchedule(branches.map(branch => ({
          ...branch,
          activeGroups: 30,
          nextGroup: "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00",
          availableSpots: 3
        })));
        setIsLoading(false);
        return;
      }

      const normalize = (s: string) => s?.toLowerCase().trim();
      const getMatchingNames = (displayName: string): string[] => {
        switch (displayName) {
          case '–õ—é–±–µ—Ä—Ü—ã':
            return ['–õ—é–±–µ—Ä—Ü—ã', '–õ—é–±–µ—Ä—Ü—ã/–ñ—É–ª–µ–±–∏–Ω–æ'];
          case '–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞':
            return ['–ö—Ä–∞—Å–Ω–∞—è –ì–æ—Ä–∫–∞', '–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞', '–ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞/–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞'];
          case '–û–∫—Å–∫–∞—è':
            return ['–û–∫—Å–∫–∞—è'];
          case '–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞':
            return ['–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞', '–û–Ω–ª–∞–π–Ω', 'Online'];
          default:
            return [displayName];
        }
      };

      const parseDays = (daysStr: string): number[] => {
        const tokens = daysStr.toLowerCase().split('/').map(d => d.trim());
        const map: Record<string, number> = { '–≤—Å': 0, '–ø–Ω': 1, '–≤—Ç': 2, '—Å—Ä': 3, '—á—Ç': 4, '–ø—Ç': 5, '—Å–±': 6 };
        const result: number[] = [];
        for (const t of tokens) {
          if (map[t] !== undefined) result.push(map[t]);
        }
        return result;
      };

      const getNextOccurrence = (schedule: ScheduleItem): { date: Date; daysDiff: number; timeStart: string } | null => {
        const timeStart = schedule.compact_time.split('-')[0];
        const [hh, mm] = timeStart.split(':').map(Number);
        const days = parseDays(schedule.compact_days);
        if (!days.length || isNaN(hh) || isNaN(mm)) return null;

        const now = new Date();
        for (let i = 0; i < 7; i++) {
          const d = new Date(now);
          d.setDate(now.getDate() + i);
          if (days.includes(d.getDay())) {
            d.setHours(hh, mm, 0, 0);
            if (i > 0 || d.getTime() > now.getTime()) {
              return { date: d, daysDiff: i, timeStart };
            }
          }
        }
        return null;
      };

      const formatFromOccurrence = (occ: { date: Date; daysDiff: number; timeStart: string } | null): string => {
        if (!occ) return "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00";
        if (occ.daysDiff === 0) return `–°–µ–≥–æ–¥–Ω—è –≤ ${occ.timeStart}`;
        if (occ.daysDiff === 1) return `–ó–∞–≤—Ç—Ä–∞ –≤ ${occ.timeStart}`;
        
        const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
        const dayName = days[occ.date.getDay()];
        return `${dayName} –≤ ${occ.timeStart}`;
      };

      const processedBranches = branches.map(branch => {
        const matchNames = getMatchingNames(branch.name).map(normalize);
        const branchSchedules = (allScheduleData || []).filter((schedule: ScheduleItem) => 
          matchNames.includes(normalize(schedule.office_name))
        );

        const activeGroups = branchSchedules.length;
        const totalVacancies = branchSchedules.reduce((sum: number, schedule: ScheduleItem) => 
          sum + schedule.vacancies, 0
        );

        const occurrences = (branchSchedules
          .map((s) => ({ schedule: s, occ: getNextOccurrence(s) }))
          .filter((x) => !!x.occ) as { schedule: ScheduleItem; occ: { date: Date; daysDiff: number; timeStart: string } }[])
          .sort((a, b) => a.occ.date.getTime() - b.occ.date.getTime());

        const best = occurrences[0] ?? null;
        const bestOcc = best?.occ ?? null;
        const nextGroup = formatFromOccurrence(bestOcc);
        const availableSpots = best ? (best.schedule.vacancies ?? 0) : 0;

        return {
          ...branch,
          activeGroups: Math.max(activeGroups, 30),
          nextGroup,
          availableSpots
        };
      });

      setBranchesWithSchedule(processedBranches);
    } catch (error) {
      console.error('Error processing schedule data:', error);
      setBranchesWithSchedule(branches.map(branch => ({
        ...branch,
        activeGroups: 30,
        nextGroup: "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00",
        availableSpots: 3
      })));
    } finally {
      setIsLoading(false);
    }
  };
  const handleWhatsApp = (branchName: string) => {
    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª–µ ${branchName}.`;
    window.open(`https://wa.me/79937073553?text=${encodeURIComponent(message)}`, "_blank");
  };

  const handleTelegram = (branchName: string) => {
    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª–µ ${branchName}.`;
    window.open(`https://t.me/okeyenglish_bot?start=${encodeURIComponent(message)}`, "_blank");
  };

  const handleCall = () => {
    window.open("tel:+74997073535", "_blank");
  };

  return (
    <div className="min-h-screen py-20">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl lg:text-5xl font-bold mb-6">
            –ù–∞—à–∏ <span className="text-gradient">—Ñ–∏–ª–∏–∞–ª—ã</span>
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
            8 —É–¥–æ–±–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ + –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ –æ–ø—ã—Ç–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
          </p>
          
          <div className="flex flex-wrap justify-center gap-4">
            <Badge variant="outline" className="px-4 py-2">
              <MapPin className="w-4 h-4 mr-2" />
              8 —Ñ–∏–ª–∏–∞–ª–æ–≤
            </Badge>
            <Badge variant="outline" className="px-4 py-2">
              <Users className="w-4 h-4 mr-2" />
              110+ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
            </Badge>
            <Badge variant="outline" className="px-4 py-2">
              <Clock className="w-4 h-4 mr-2" />
              –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            </Badge>
          </div>
        </div>

        {/* Quick Navigation */}
        <div className="grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-9 gap-4 mb-16">
          {branches.map((branch) => (
            <Link 
              key={branch.id}
              to={`/branches/${branch.id}`}
              className="text-center p-4 rounded-lg border hover:border-primary/50 hover:bg-muted/50 transition-all"
            >
              <div className="w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-3">
                <MapPin className="w-6 h-6 text-white" />
              </div>
              <div className="font-semibold">{branch.name}</div>
              <div className="text-sm text-muted-foreground">{branch.metro}</div>
            </Link>
          ))}
        </div>

        {/* Branches Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
          {isLoading ? (
            // Loading skeleton
            Array.from({ length: 9 }).map((_, index) => (
              <Card key={index} className="card-elevated overflow-hidden">
                <div className="aspect-[16/9] bg-muted animate-pulse"></div>
                <CardHeader>
                  <div className="h-6 bg-muted animate-pulse rounded"></div>
                  <div className="h-4 bg-muted animate-pulse rounded w-3/4"></div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="h-4 bg-muted animate-pulse rounded"></div>
                  <div className="h-20 bg-muted animate-pulse rounded"></div>
                </CardContent>
              </Card>
            ))
          ) : (
            branchesWithSchedule.map((branch) => (
            <Card key={branch.id} className="card-elevated hover:border-primary/50 transition-all overflow-hidden">
              <div className="aspect-[16/9] bg-gradient-subtle flex items-center justify-center overflow-hidden">
                {branch.image && typeof branch.image === 'string' && branch.image.startsWith('/') ? (
                  <span className="text-muted-foreground">–§–æ—Ç–æ —Ñ–∏–ª–∏–∞–ª–∞ {branch.name}</span>
                ) : (
                  <img 
                    src={branch.image} 
                    alt={`–ò–Ω—Ç–µ—Ä—å–µ—Ä —Ñ–∏–ª–∏–∞–ª–∞ O'KEY English ${branch.name}`}
                    className="w-full h-full object-cover"
                  />
                )}
              </div>
              
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-xl flex items-center gap-2">
                      <MapPin className="w-5 h-5 text-primary" />
                      {branch.name}
                    </CardTitle>
                    <CardDescription className="mt-2">
                      {branch.address}
                    </CardDescription>
                  </div>
                  <Badge className="bg-gradient-primary text-white">
                    {branch.activeGroups} –≥—Ä—É–ø–ø
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-6">
                {/* Working Hours */}
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="w-4 h-4 text-primary" />
                  <span>{branch.workingHours}</span>
                </div>

                {/* Available Languages */}
                <div>
                  <h4 className="font-semibold mb-3">–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</h4>
                  <div className="flex flex-wrap gap-2">
                    {languages.map((language, index) => (
                      <div key={index} className="flex items-center gap-1 bg-muted px-2 py-1 rounded-full text-xs">
                        <span className="text-sm">{language.icon}</span>
                        <span>{language.name}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Next Group */}
                <div className="bg-gradient-subtle p-4 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div>
                      <div className="text-sm text-muted-foreground">–ë–ª–∏–∂–∞–π—à–∞—è –≥—Ä—É–ø–ø–∞:</div>
                      <div className="font-medium">{branch.nextGroup}</div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-muted-foreground">–°–≤–æ–±–æ–¥–Ω–æ:</div>
                      <div className="text-primary font-semibold">
                        {branch.availableSpots === 0 
                          ? '–ì—Ä—É–ø–ø–∞ –Ω–∞–±—Ä–∞–Ω–∞' 
                          : `${branch.availableSpots} ${branch.availableSpots === 1 ? '–º–µ—Å—Ç–æ' : branch.availableSpots < 5 ? '–º–µ—Å—Ç–∞' : '–º–µ—Å—Ç'}`
                        }
                      </div>
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex flex-col gap-3">
                  <Link to={`/branches/${branch.id}`}>
                    <Button variant="hero" className="w-full">
                      <ArrowRight className="w-4 h-4 mr-2" />
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª–∏–∞–ª–µ
                    </Button>
                  </Link>
                  
                  <div className="flex justify-center gap-3">
                    <Button 
                      variant="outline" 
                      size="icon"
                      onClick={handleCall}
                      className="rounded-full"
                    >
                      <Phone className="w-4 h-4" />
                    </Button>
                    <Button 
                      variant="outline" 
                      size="icon"
                      onClick={() => handleWhatsApp(branch.name)}
                      className="rounded-full"
                    >
                      <MessageCircle className="w-4 h-4" />
                    </Button>
                    <Button 
                      variant="outline" 
                      size="icon"
                      onClick={() => handleTelegram(branch.name)}
                      className="rounded-full"
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            ))
          )}
        </div>

        {/* General Schedule Info */}
        <section className="bg-gradient-subtle rounded-2xl p-8 lg:p-12 mb-16">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">
              –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            </h2>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              –í–æ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö –¥–µ–π—Å—Ç–≤—É–µ—Ç –≥–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-4">
                <Clock className="w-8 h-8 text-white" />
              </div>
              <h3 className="font-semibold mb-2">–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</h3>
              <p className="text-sm text-muted-foreground">
                –£—Ç—Ä–µ–Ω–Ω–∏–µ, –¥–Ω–µ–≤–Ω—ã–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ó–∞–Ω—è—Ç–∏—è –≤ –±—É–¥–Ω–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-4">
                <Users className="w-8 h-8 text-white" />
              </div>
              <h3 className="font-semibold mb-2">–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã</h3>
              <p className="text-sm text-muted-foreground">
                6-12 —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-4">
                <Star className="w-8 h-8 text-white" />
              </div>
              <h3 className="font-semibold mb-2">–í—Å–µ —É—Ä–æ–≤–Ω–∏</h3>
              <p className="text-sm text-muted-foreground">
                –û—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö A1 –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö C2. –†–µ–≥—É–ª—è—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø
              </p>
            </div>
          </div>
        </section>

        {/* Map Section */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold text-center mb-8">–í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ</h2>
          <Card className="card-elevated">
            <CardContent className="p-0">
              <div className="aspect-[16/9] bg-gradient-subtle rounded-lg flex items-center justify-center">
                <div className="text-center">
                  <MapPin className="w-16 h-16 text-primary mx-auto mb-4" />
                  <p className="text-lg font-semibold">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</p>
                  <p className="text-sm text-muted-foreground">8 —Ñ–∏–ª–∏–∞–ª–æ–≤ O'KEY ENGLISH –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ + –æ–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* CTA Section */}
        <section className="bg-primary rounded-2xl p-8 lg:p-12 text-center text-white">
          <h2 className="text-3xl font-bold mb-4">
            –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
          </h2>
          <p className="text-xl text-white/90 mb-8 max-w-2xl mx-auto">
            –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –≤ –ª—é–±–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/contacts">
              <Button variant="secondary" size="lg" className="flex items-center gap-2">
                <UserCheck className="w-5 h-5" />
                –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
              </Button>
            </Link>
            <Button 
              variant="outline" 
              size="lg"
              className="border-white text-white hover:bg-white hover:text-primary"
              onClick={() => handleWhatsApp("–±–ª–∏–∂–∞–π—à–µ–º")}
            >
              <MessageCircle className="w-5 h-5 mr-2" />
              –í—ã–±—Ä–∞—Ç—å –≤ WhatsApp
            </Button>
          </div>
        </section>
      </div>
    </div>
  );
}