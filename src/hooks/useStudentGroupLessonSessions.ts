import { useQuery, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useEffect } from "react";

export interface StudentLessonSession {
  id: string;
  lesson_session_id: string;
  student_id: string;
  lesson_date: string;
  attendance_status: string;
  payment_status: 'paid' | 'not_paid' | 'free' | 'bonus';
  payment_amount: number;
  is_cancelled_for_student: boolean;
  cancellation_reason: string | null;
  notes: string | null;
  _isTemp?: boolean;
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
  start_time?: string;
  end_time?: string;
  duration?: number;
  lesson_number?: number;
}

const calculateStudentSessions = async (
  studentId: string,
  groupId: string
): Promise<StudentLessonSession[]> => {
  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [
    groupSessionsResponse,
    studentSessionsResponse,
    paymentsResponse,
    groupStudentResponse
  ] = await Promise.all([
    // –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
    supabase
      .from('lesson_sessions')
      .select('id, lesson_date, status, start_time, end_time, lesson_number')
      .eq('group_id', groupId)
      .order('lesson_date', { ascending: true }),
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    supabase
      .from('student_lesson_sessions')
      .select('*')
      .eq('student_id', studentId),
    
    // –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    supabase
      .from('payments')
      .select('lessons_count, created_at')
      .eq('student_id', studentId)
      .eq('group_id', groupId)
      .order('created_at', { ascending: true }),
    
    // –î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    supabase
      .from('group_students')
      .select('enrollment_date')
      .eq('student_id', studentId)
      .eq('group_id', groupId)
      .maybeSingle()
  ]);

  if (groupSessionsResponse.error) throw groupSessionsResponse.error;
  if (studentSessionsResponse.error) throw studentSessionsResponse.error;
  if (paymentsResponse.error) throw paymentsResponse.error;

  const allSessions = groupSessionsResponse.data || [];
  const personalSessions = studentSessionsResponse.data || [];
  const payments = paymentsResponse.data || [];
  const enrollmentDate = groupStudentResponse.data?.enrollment_date 
    ? new Date(groupStudentResponse.data.enrollment_date) 
    : null;

  if (enrollmentDate) {
    enrollmentDate.setHours(0, 0, 0, 0);
  }

  // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const personalDataMap = new Map();
  personalSessions.forEach(session => {
    personalDataMap.set(session.lesson_session_id, session);
  });

  // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
  let remainingPaidMinutes = payments.reduce(
    (sum, p) => sum + (p.lessons_count || 0) * 40,
    0
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏—è
  const getDuration = (session: any): number => {
    if (session.start_time && session.end_time) {
      try {
        const [sh, sm] = String(session.start_time).split(':').map(Number);
        const [eh, em] = String(session.end_time).split(':').map(Number);
        return (eh * 60 + em) - (sh * 60 + sm);
      } catch {
        return 80;
      }
    }
    return 80;
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è —Å –¥–∞—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω–∏—è
  const relevantSessions = allSessions.filter(session => {
    const sessionDate = new Date(session.lesson_date);
    sessionDate.setHours(0, 0, 0, 0);
    return !enrollmentDate || sessionDate >= enrollmentDate;
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ
  const result: StudentLessonSession[] = [];
  
  for (const session of relevantSessions) {
    const personalData = personalDataMap.get(session.id);
    const duration = getDuration(session);
    
    let payment_status: 'paid' | 'not_paid' | 'free' | 'bonus' = 'not_paid';
    let is_cancelled_for_student = personalData?.is_cancelled_for_student || false;
    let cancellation_reason = personalData?.cancellation_reason || null;

    // –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
    if (session.status === 'cancelled' || session.status === 'rescheduled') {
      is_cancelled_for_student = true;
      if (!cancellation_reason) {
        cancellation_reason = session.status === 'cancelled'
          ? '–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã'
          : '–ó–∞–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ';
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ/–±–µ—Å–ø–ª–∞—Ç–Ω–æ–º)
    const groupIsFree = (session as any).status === 'free' || 
                        (session as any).is_free || 
                        (session as any).payment_type === 'free';

    if (groupIsFree) {
      payment_status = 'free';
    } else if (is_cancelled_for_student) {
      // –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –±—ã–ª
      payment_status = (personalData?.payment_status && personalData.payment_status !== 'not_paid')
        ? personalData.payment_status
        : 'not_paid';
    } else if (personalData?.payment_status && personalData.payment_status !== 'not_paid') {
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —è–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      payment_status = personalData.payment_status;
    } else {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
      if (remainingPaidMinutes >= duration) {
        payment_status = 'paid';
        remainingPaidMinutes -= duration;
      }
    }

    result.push({
      id: personalData?.id || `temp_${studentId}_${session.id}`,
      lesson_session_id: session.id,
      student_id: studentId,
      lesson_date: session.lesson_date,
      attendance_status: personalData?.attendance_status || 'not_marked',
      payment_status,
      payment_amount: personalData?.payment_amount || 0,
      is_cancelled_for_student,
      cancellation_reason,
      notes: personalData?.notes || null,
      start_time: session.start_time,
      end_time: session.end_time,
      duration,
      lesson_number: session.lesson_number,
      _isTemp: !personalData
    });
  }

  return result;
};

export const useStudentGroupLessonSessions = (
  studentId: string | undefined,
  groupId: string | undefined
) => {
  const queryClient = useQueryClient();

  // Realtime –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ lesson_sessions
  useEffect(() => {
    if (!groupId) return;

    console.log('üî¥ Subscribing to lesson_sessions changes for group:', groupId);

    const channel = supabase
      .channel(`lesson_sessions_${groupId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'lesson_sessions',
          filter: `group_id=eq.${groupId}`
        },
        (payload) => {
          console.log('üî¥ Realtime event for lesson_sessions:', payload);
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-lesson-sessions', studentId, groupId] 
          });
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-payment-stats', studentId, groupId] 
          });
        }
      )
      .subscribe((status) => {
        console.log('üî¥ Lesson sessions channel status:', status);
      });

    return () => {
      console.log('üî¥ Unsubscribing from lesson_sessions for group:', groupId);
      supabase.removeChannel(channel);
    };
  }, [groupId, studentId, queryClient]);

  // Realtime –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ student_lesson_sessions
  useEffect(() => {
    if (!studentId) return;

    console.log('üü° Subscribing to student_lesson_sessions changes for student:', studentId);

    const channel = supabase
      .channel(`student_lesson_sessions_${studentId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'student_lesson_sessions',
          filter: `student_id=eq.${studentId}`
        },
        (payload) => {
          console.log('üü° Realtime event for student_lesson_sessions:', payload);
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-lesson-sessions', studentId, groupId] 
          });
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-payment-stats', studentId, groupId] 
          });
        }
      )
      .subscribe((status) => {
        console.log('üü° Student lesson sessions channel status:', status);
      });

    return () => {
      console.log('üü° Unsubscribing from student_lesson_sessions for student:', studentId);
      supabase.removeChannel(channel);
    };
  }, [studentId, groupId, queryClient]);

  // Realtime –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
  useEffect(() => {
    if (!studentId || !groupId) return;

    console.log('üü¢ Subscribing to payments changes for student:', studentId);

    const channel = supabase
      .channel(`payments_${studentId}_${groupId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'payments',
          filter: `student_id=eq.${studentId}`
        },
        (payload) => {
          console.log('üü¢ Realtime event for payments:', payload);
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-lesson-sessions', studentId, groupId] 
          });
          queryClient.invalidateQueries({ 
            queryKey: ['student-group-payment-stats', studentId, groupId] 
          });
        }
      )
      .subscribe((status) => {
        console.log('üü¢ Payments channel status:', status);
      });

    return () => {
      console.log('üü¢ Unsubscribing from payments for student:', studentId);
      supabase.removeChannel(channel);
    };
  }, [studentId, groupId, queryClient]);

  return useQuery({
    queryKey: ['student-group-lesson-sessions', studentId, groupId],
    queryFn: () => calculateStudentSessions(studentId!, groupId!),
    enabled: !!studentId && !!groupId,
    staleTime: 0,
    gcTime: 5 * 60 * 1000,
    refetchOnMount: true,
    refetchOnWindowFocus: true
  });
};
