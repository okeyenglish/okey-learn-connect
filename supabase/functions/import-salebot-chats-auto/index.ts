import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.75.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface SalebotHistoryMessage {
  id: number;
  answered: boolean;
  client_replica: boolean;
  message_id: number;
  message_from_outside: number;
  created_at: number;
  text: string;
  attachments: any;
  delivered: boolean;
  error_message: string;
  manager_id: number | null;
  manager_email: string | null;
}

interface SalebotClient {
  id: number;
  platform_id: string;
  client_type: number;
  name: string | null;
  avatar: string | null;
  message_id: number | null;
  project_id: number;
  created_at: number;
  updated_at: number;
  custom_answer: string | null;
  tag: string | null;
  group: string;
  operator_start_dialog: string | null;
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const salebotApiKey = Deno.env.get('SALEBOT_API_KEY');

    if (!salebotApiKey) {
      throw new Error('SALEBOT_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Ç—É—Ö—à—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Å—Ç–∞—Ä—à–µ 90 —Å–µ–∫—É–Ω–¥)
    const { data: staleProgress } = await supabase
      .from('salebot_import_progress')
      .select('id, is_running, updated_at')
      .order('id', { ascending: false })
      .limit(1)
      .single();

    if (staleProgress?.is_running) {
      const lastUpdate = new Date(staleProgress.updated_at);
      const now = new Date();
      const ageSeconds = (now.getTime() - lastUpdate.getTime()) / 1000;
      
      if (ageSeconds > 90) {
        console.log(`‚è±Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ—Ç—É—Ö—à–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (${Math.round(ageSeconds)}s). –°–±—Ä–∞—Å—ã–≤–∞–µ–º...`);
        await supabase
          .from('salebot_import_progress')
          .update({ is_running: false })
          .eq('id', staleProgress.id);
        console.log('‚úÖ Stale lock cleared');
      }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –∞—Ç–æ–º–∞—Ä–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é
    const { data: lockResult, error: lockError } = await supabase.rpc('try_acquire_import_lock');
    
    if (lockError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', lockError);
      return new Response(
        JSON.stringify({ error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: ${lockError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!lockResult || lockResult.length === 0) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      return new Response(
        JSON.stringify({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const lock = lockResult[0];
    
    if (!lock.acquired) {
      console.log('‚è∏Ô∏è –ò–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.');
      return new Response(
        JSON.stringify({ 
          message: '–ò–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
          totalImported: 0,
          totalClients: 0,
          completed: false,
          skipped: true
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const progressId = lock.progress_id;
    
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', JSON.stringify(lock));
    
    if (!progressId) {
      console.error('progress_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      return new Response(
        JSON.stringify({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å progress_id –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (list_id –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π offset)
    const { data: progressData } = await supabase
      .from('salebot_import_progress')
      .select('id, list_id, current_offset, total_clients_processed, total_messages_imported, total_imported')
      .eq('id', progressId)
      .single();
    
    const listId = progressData?.list_id;
    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    const baseClients = progressData?.total_clients_processed ?? 0;
    const baseMsgs = progressData?.total_messages_imported ?? 0;
    const baseImported = progressData?.total_imported ?? 0;

    // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ current_offset = 0, –Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
    let currentOffset = (lock.current_offset ?? 0);
    if ((!currentOffset || currentOffset === 0) && progressData) {
      currentOffset = progressData.current_offset ?? progressData.total_clients_processed ?? 0;
    }
    const mode = listId ? `—Å–ø–∏—Å–æ–∫ ${listId}` : '–≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã';
    
    console.log(`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. Progress ID: ${progressId}`);
    console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç (${mode}): –Ω–∞—á–∞–ª–æ –±–∞—Ç—á–∞ (offset: ${currentOffset})...`);

    // –ü–æ–ª—É—á–∞–µ–º organization_id
    const { data: orgs } = await supabase.from('organizations').select('id').limit(1);
    const organizationId = orgs?.[0]?.id;

    if (!organizationId) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è');
    }

    let totalImported = 0;
    let totalClients = 0;
    let totalProcessedMessages = 0;
    let errors: string[] = [];
    const clientBatchSize = 10; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 20 –¥–æ 10 –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞

    let salebotClients: SalebotClient[] = [];

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω list_id, –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ Salebot
    if (listId) {
      const clientsUrl = `https://chatter.salebot.pro/api/${salebotApiKey}/get_clients`;
      const clientsResponse = await fetch(clientsUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          list: listId,
          offset: currentOffset,
          limit: clientBatchSize
        })
      });

      if (!clientsResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞: ${clientsResponse.statusText}`);
      }

      const clientsData = await clientsResponse.json();
      salebotClients = clientsData.clients || [];

      if (salebotClients.length === 0) {
        const nowIso = new Date().toISOString();
        await supabase
          .from('salebot_import_progress')
          .update({
            current_offset: currentOffset,
            last_run_at: nowIso,
            updated_at: nowIso,
            is_running: false
          })
          .eq('id', progressId);

        return new Response(
          JSON.stringify({
            success: true,
            completed: true,
            message: 'All list clients processed'
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${salebotClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ ${listId} (offset: ${currentOffset})`);
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã
      const { data: clients, error: clientsError } = await supabase
        .from('clients')
        .select('id, name, phone_numbers:client_phone_numbers(phone)')
        .not('phone_numbers', 'is', null)
        .range(currentOffset, currentOffset + clientBatchSize - 1);

      if (clientsError) {
        throw clientsError;
      }

      if (!clients || clients.length === 0) {
        console.log('–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.');
        await supabase
          .from('salebot_import_progress')
          .update({ is_running: false })
          .eq('id', progressData.id);

        return new Response(
          JSON.stringify({
            success: true,
            completed: true,
            message: 'All clients processed'
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ (offset: ${currentOffset})`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ Salebot
    if (listId && salebotClients.length > 0) {
      for (const salebotClient of salebotClients) {
        try {
          console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: Salebot ID ${salebotClient.id}, –∏–º—è: ${salebotClient.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);

          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
          const historyUrl = `https://chatter.salebot.pro/api/${salebotApiKey}/get_history?client_id=${salebotClient.id}&limit=2000`;
          const historyResponse = await fetch(historyUrl);

          if (!historyResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${historyResponse.statusText}`);
          }

          const historyData = await historyResponse.json();
          const messages: SalebotHistoryMessage[] = historyData.result || [];

          console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

          if (messages.length === 0) continue;

          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ platform_id –∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
          let phoneNumber = salebotClient.platform_id?.replace(/\D/g, '');
          
          if (!phoneNumber || phoneNumber.length < 10) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${salebotClient.id}`);
            continue;
          }

          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
          if (phoneNumber.match(/^8\d{10}$/)) {
            phoneNumber = '7' + phoneNumber.substring(1);
          }
          if (phoneNumber.length === 10) {
            phoneNumber = '7' + phoneNumber;
          }

          console.log(`–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}`);

          // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          const { data: existingPhones } = await supabase
            .from('client_phone_numbers')
            .select('client_id, clients(id, name)')
            .eq('phone', phoneNumber);

          let clientId: string;
          // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ Salebot, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
          let clientName = (salebotClient.name && salebotClient.name.trim()) 
            ? salebotClient.name.trim() 
            : `–ö–ª–∏–µ–Ω—Ç ${phoneNumber}`;

          if (existingPhones && existingPhones.length > 0) {
            // –ö–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            clientId = existingPhones[0].client_id;
            console.log(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç: ${clientId}`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            const { data: newClient, error: createError } = await supabase
              .from('clients')
              .insert({
                name: clientName,
                organization_id: organizationId,
                is_active: true
              })
              .select()
              .single();

            if (createError || !newClient) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', createError);
              continue;
            }

            clientId = newClient.id;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            await supabase
              .from('client_phone_numbers')
              .insert({
                client_id: clientId,
                phone: phoneNumber,
                is_primary: true
              });

            console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${clientId}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}`);
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
          const chatMessages: any[] = [];
          
          for (const msg of messages) {
            if (!msg.created_at) continue;

            let date: Date;
            if (typeof msg.created_at === 'number') {
              date = new Date(msg.created_at * 1000);
            } else {
              date = new Date(msg.created_at);
            }
            
            if (isNaN(date.getTime())) continue;
            
            chatMessages.push({
              client_id: clientId,
              organization_id: organizationId,
              message_text: msg.text || '',
              message_type: msg.client_replica ? 'client' : 'manager',
              is_outgoing: !msg.client_replica,
              is_read: true,
              created_at: date.toISOString(),
              messenger_type: 'whatsapp',
              salebot_message_id: msg.id.toString(),
            });
          }

          // –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
          const batchSize = 50;
          let processedMessages = 0;
          
          for (let i = 0; i < chatMessages.length; i += batchSize) {
            const batch = chatMessages.slice(i, i + batchSize);
            processedMessages += batch.length;
            
            const salebotIds = batch.map(m => m.salebot_message_id);
            const { data: existing } = await supabase
              .from('chat_messages')
              .select('salebot_message_id')
              .eq('client_id', clientId)
              .in('salebot_message_id', salebotIds);
            
            const existingIds = new Set((existing || []).map(e => e.salebot_message_id));
            const newMessages = batch.filter(m => !existingIds.has(m.salebot_message_id));
            
            console.log(`–ë–∞—Ç—á ${i/batchSize + 1}: –≤—Å–µ–≥–æ ${batch.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ${existingIds.size}, –Ω–æ–≤—ã—Ö ${newMessages.length}`);
            
              if (newMessages.length > 0) {
                const { error: insertError } = await supabase
                  .from('chat_messages')
                  .insert(newMessages, { onConflict: 'client_id,salebot_message_id', ignoreDuplicates: true });

                if (insertError) {
                  console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError);
                } else {
                  totalImported += newMessages.length;
                  console.log(`–í—Å—Ç–∞–≤–ª–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—Å–µ–≥–æ: ${totalImported}`);
                }
              } else {
                console.log('–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–¥—É–±–ª–∏–∫–∞—Ç—ã)');
              }
            
            await new Promise(resolve => setTimeout(resolve, 100)); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 200ms –¥–æ 100ms
          }

          totalClients++;
          totalProcessedMessages += processedMessages;
          console.log(`–ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalProcessedMessages}, –Ω–æ–≤—ã—Ö: ${totalImported}`);
          
          // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–º–º–∏—Ç –∫–∞–∂–¥—ã–µ 5 –∫–ª–∏–µ–Ω—Ç–æ–≤
          if (totalClients % 5 === 0) {
            console.log(`üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–º–º–∏—Ç (${totalClients} –∫–ª–∏–µ–Ω—Ç–æ–≤)...`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ heartbeat, —á—Ç–æ–±—ã UI –≤–∏–¥–µ–ª —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            const nowIso = new Date().toISOString();
            const { error: updErr } = await supabase
              .from('salebot_import_progress')
              .update({
                total_clients_processed: baseClients + totalClients,
                total_messages_imported: baseMsgs + totalProcessedMessages,
                total_imported: baseImported + totalImported,
                current_offset: currentOffset + totalClients,
                last_run_at: nowIso,
                updated_at: nowIso,
                is_running: true,
              })
              .eq('id', progressId);
            if (updErr) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', updErr);
            }

            const { data: check } = await supabase
              .from('salebot_import_progress')
              .select('current_offset, total_clients_processed, total_messages_imported, updated_at')
              .eq('id', progressId)
              .single();
            console.log(`‚úÖ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: offset ${currentOffset + totalClients}; –≤ –ë–î offset=${check?.current_offset}, clients=${check?.total_clients_processed}, msgs=${check?.total_messages_imported}`);
          }

        } catch (error: any) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ Salebot ID ${salebotClient.id}:`, error);
          errors.push(`Salebot ID ${salebotClient.id}: ${error.message}`);
        }

        await new Promise(resolve => setTimeout(resolve, 150)); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500ms –¥–æ 150ms
      }
    } else if (!listId) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã
      const { data: clients } = await supabase
        .from('clients')
        .select('id, name, phone_numbers:client_phone_numbers(phone)')
        .not('phone_numbers', 'is', null)
        .range(currentOffset, currentOffset + clientBatchSize - 1);

      if (!clients || clients.length === 0) {
        return new Response(
          JSON.stringify({ success: true, completed: true }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      for (const client of clients) {
        const phoneNumbers = client.phone_numbers || [];
        
        for (const phoneRecord of phoneNumbers) {
          const phone = phoneRecord.phone;
          if (!phone) continue;

          let normalized = phone.replace(/\D/g, '');
          
          if (normalized.match(/^8\d{10}$/)) {
            normalized = '7' + normalized.substring(1);
          }
          
          if (normalized.length === 10) {
            normalized = '7' + normalized;
          }
          
          const cleanPhone = normalized;
          
          try {
            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞: ${client.name}, —Ç–µ–ª: ${phone} ‚Üí ${cleanPhone}`);

            const phoneVariants = [
              cleanPhone,
              cleanPhone.replace(/^7/, '8'),
              `+${cleanPhone}`,
              cleanPhone.substring(1),
            ];

            let salebotClientId = null;
            let foundPhone = null;

            for (const phoneVariant of phoneVariants) {
              const clientIdUrl = `https://chatter.salebot.pro/api/${salebotApiKey}/whatsapp_client_id?phone=${phoneVariant}&group_id=115236`;
              
              try {
                const clientIdResponse = await fetch(clientIdUrl);

                if (clientIdResponse.status === 404) continue;
                if (!clientIdResponse.ok) continue;

                const clientIdData = await clientIdResponse.json();
                if (clientIdData.client_id) {
                  salebotClientId = clientIdData.client_id;
                  foundPhone = phoneVariant;
                  break;
                }
              } catch (error) {
                continue;
              }
            }

            if (!salebotClientId) {
              console.log(`–ö–ª–∏–µ–Ω—Ç ${phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Salebot`);
              continue;
            }

            console.log(`–ü–æ–ª—É—á–µ–Ω client_id: ${salebotClientId} (—Ñ–æ—Ä–º–∞—Ç: ${foundPhone})`);

            const historyUrl = `https://chatter.salebot.pro/api/${salebotApiKey}/get_history?client_id=${salebotClientId}&limit=2000`;
            const historyResponse = await fetch(historyUrl);

            if (!historyResponse.ok) {
              throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${historyResponse.statusText}`);
            }

            const historyData = await historyResponse.json();
            const messages: SalebotHistoryMessage[] = historyData.result || [];
            const processedMessages = messages.length;

            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${processedMessages} —Å–æ–æ–±—â–µ–Ω–∏–π`);

            if (processedMessages === 0) continue;

            const chatMessages: any[] = [];
            
            for (const msg of messages) {
              if (!msg.created_at) continue;

              let date: Date;
              if (typeof msg.created_at === 'number') {
                date = new Date(msg.created_at * 1000);
              } else {
                date = new Date(msg.created_at);
              }
              
              if (isNaN(date.getTime())) continue;
              
              chatMessages.push({
                client_id: client.id,
                organization_id: organizationId,
                message_text: msg.text || '',
                message_type: msg.client_replica ? 'client' : 'manager',
                is_outgoing: !msg.client_replica,
                is_read: true,
                created_at: date.toISOString(),
                messenger_type: 'whatsapp',
                salebot_message_id: msg.id.toString(),
              });
            }

            const batchSize = 50;
            for (let i = 0; i < chatMessages.length; i += batchSize) {
              const batch = chatMessages.slice(i, i + batchSize);
              
              const salebotIds = batch.map(m => m.salebot_message_id);
              const { data: existing } = await supabase
                .from('chat_messages')
                .select('salebot_message_id')
                .eq('client_id', client.id)
                .in('salebot_message_id', salebotIds);
              
              const existingIds = new Set((existing || []).map(e => e.salebot_message_id));
              const newMessages = batch.filter(m => !existingIds.has(m.salebot_message_id));
              
              if (newMessages.length > 0) {
                const { error: insertError } = await supabase
                  .from('chat_messages')
                  .insert(newMessages, { onConflict: 'client_id,salebot_message_id', ignoreDuplicates: true });

                if (insertError) {
                  console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError);
                } else {
                  totalImported += newMessages.length;
                }
              }
              
              await new Promise(resolve => setTimeout(resolve, 100)); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 200ms –¥–æ 100ms
            }

            totalClients++;
            totalProcessedMessages += processedMessages;

          } catch (error: any) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${client.name}:`, error);
            errors.push(`${client.name}: ${error.message}`);
          }

          await new Promise(resolve => setTimeout(resolve, 150)); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500ms –¥–æ 150ms
        }
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –±–∞—Ç—á–∞
    const nextOffset = currentOffset + totalClients;

    // –Ø–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ heartbeat
    const nowIso = new Date().toISOString();
    const { error: finalUpdErr } = await supabase
      .from('salebot_import_progress')
      .update({
        total_clients_processed: baseClients + totalClients,
        total_messages_imported: baseMsgs + totalProcessedMessages,
        total_imported: baseImported + totalImported,
        current_offset: nextOffset,
        last_run_at: nowIso,
        updated_at: nowIso,
        is_running: false,
      })
      .eq('id', progressId);
    if (finalUpdErr) console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', finalUpdErr);

    console.log(`‚úÖ –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}, —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalProcessedMessages}, –Ω–æ–≤—ã—Ö: ${totalImported}, nextOffset: ${nextOffset}`);

    const isCompleted = listId 
      ? salebotClients.length < clientBatchSize 
      : false;

    return new Response(
      JSON.stringify({
        success: true,
        totalImported,
        totalClients,
        nextOffset,
        completed: isCompleted,
        mode: listId ? 'list' : 'all_clients',
        listId: listId || null
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞:', error);
    
    // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ is_running –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      const supabase = createClient(
        Deno.env.get('SUPABASE_URL')!,
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
      );
      await supabase
        .from('salebot_import_progress')
        .update({ is_running: false })
        .limit(1);
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ is_running:', e);
    }
    
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
