import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const supabase = createClient(supabaseUrl, supabaseServiceKey)

interface GreenAPIWebhook {
  typeWebhook: string;
  instanceData: {
    idInstance: string;
    wid: string;
    typeInstance: string;
  };
  timestamp: number;
  idMessage?: string;
  senderData?: {
    chatId: string;
    chatName?: string;
    sender: string;
    senderName?: string;
  };
  messageData?: {
    typeMessage: string;
    textMessageData?: {
      textMessage: string;
    };
    fileMessageData?: {
      downloadUrl: string;
      caption?: string;
      fileName?: string;
      jpegThumbnail?: string;
      mimeType?: string;
    };
    extendedTextMessageData?: {
      text: string;
      stanzaId?: string;
      participant?: string;
    };
  };
  status?: string;
  statusData?: {
    timestamp: number;
    idMessage: string;
    status: string;
  };
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const webhook: GreenAPIWebhook = await req.json()
    console.log('Received webhook:', JSON.stringify(webhook, null, 2))

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await supabase.from('webhook_logs').insert({
      messenger_type: 'whatsapp',
      event_type: webhook.typeWebhook,
      webhook_data: webhook,
      processed: false
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã webhook —Å–æ–±—ã—Ç–∏–π
    switch (webhook.typeWebhook) {
      case 'incomingMessageReceived':
        await handleIncomingMessage(webhook)
        break
      
      case 'outgoingMessageStatus':
        await handleMessageStatus(webhook)
        break
        
      case 'outgoingMessageReceived':
        await handleOutgoingMessage(webhook)
        break
        
      case 'stateInstanceChanged':
        await handleStateChange(webhook)
        break
        
      case 'incomingCall':
        await handleIncomingCall(webhook)
        break
        
      default:
        console.log(`Unhandled webhook type: ${webhook.typeWebhook}`)
    }

    // –û—Ç–º–µ—á–∞–µ–º webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    await supabase
      .from('webhook_logs')
      .update({ processed: true })
      .eq('webhook_data->instanceData->>idInstance', webhook.instanceData?.idInstance)
      .eq('webhook_data->>typeWebhook', webhook.typeWebhook)
      .eq('webhook_data->>timestamp', webhook.timestamp)

    return new Response(JSON.stringify({ success: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error('Error processing webhook:', error)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥
    try {
      await supabase.from('webhook_logs').insert({
        messenger_type: 'whatsapp',
        event_type: 'error',
        webhook_data: { error: error.message },
        processed: false,
        error_message: error.message
      })
    } catch (logError) {
      console.error('Error saving error log:', logError)
    }

    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})

async function handleIncomingMessage(webhook: GreenAPIWebhook) {
  const { senderData, messageData, idMessage } = webhook
  
  if (!senderData || !messageData) {
    console.log('Missing sender or message data')
    return
  }

  const chatId = senderData.chatId
  const phoneNumber = extractPhoneFromChatId(chatId)
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  let client = await findOrCreateClient(phoneNumber, senderData.senderName || senderData.sender)
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  let messageText = ''
  let fileUrl = null
  let fileName = null
  let fileType = null

  switch (messageData.typeMessage) {
    case 'textMessage':
      messageText = messageData.textMessageData?.textMessage || ''
      break
    case 'imageMessage':
    case 'videoMessage':
    case 'documentMessage':
    case 'audioMessage':
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (messageData.typeMessage === 'imageMessage') {
        messageText = messageData.fileMessageData?.caption || 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      } else if (messageData.typeMessage === 'videoMessage') {
        messageText = messageData.fileMessageData?.caption || 'üé• –í–∏–¥–µ–æ'
      } else if (messageData.typeMessage === 'audioMessage') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        const mimeType = messageData.fileMessageData?.mimeType
        if (mimeType && (mimeType.includes('ogg') || mimeType.includes('opus'))) {
          messageText = 'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        } else {
          messageText = messageData.fileMessageData?.caption || 'üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª'
        }
      } else if (messageData.typeMessage === 'documentMessage') {
        messageText = messageData.fileMessageData?.caption || `üìÑ ${messageData.fileMessageData?.fileName || '–î–æ–∫—É–º–µ–Ω—Ç'}`
      } else {
        messageText = messageData.fileMessageData?.caption || '[–§–∞–π–ª]'
      }
      fileUrl = messageData.fileMessageData?.downloadUrl
      fileName = messageData.fileMessageData?.fileName
      fileType = messageData.fileMessageData?.mimeType
      break
    case 'extendedTextMessage':
      messageText = messageData.extendedTextMessageData?.text || ''
      break
    default:
      messageText = `[${messageData.typeMessage}]`
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const { error } = await supabase.from('chat_messages').insert({
    client_id: client.id,
    message_text: messageText,
    message_type: 'client',
    messenger_type: 'whatsapp',
    message_status: 'delivered',
    green_api_message_id: idMessage,
    is_outgoing: false,
    is_read: false,
    file_url: fileUrl,
    file_name: fileName,
    file_type: fileType,
    created_at: new Date(webhook.timestamp * 1000).toISOString()
  })

  if (error) {
    console.error('Error saving incoming message:', error)
    throw error
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞
  await supabase
    .from('clients')
    .update({ 
      last_message_at: new Date(webhook.timestamp * 1000).toISOString(),
      whatsapp_chat_id: chatId
    })
    .eq('id', client.id)

  console.log(`Saved incoming message from ${phoneNumber}: ${messageText}`)
  
  // Trigger delayed GPT response generation (30 seconds delay)
  console.log('Triggering delayed GPT response for client:', client.id);
  
  // Use background task to avoid blocking the webhook response
  setTimeout(async () => {
    try {
      const { data: gptResult, error: gptError } = await supabase.functions.invoke('generate-delayed-gpt-response', {
        body: { 
          clientId: client.id,
          maxWaitTimeMs: 30000 // 30 seconds
        }
      });

      if (gptError) {
        console.error('Error generating delayed GPT response:', gptError);
      } else {
        console.log('Delayed GPT response generated:', gptResult);
      }
    } catch (error) {
      console.error('Error triggering delayed GPT response:', error);
    }
  }, 1000); // Small delay to allow webhook to respond first
}

async function handleMessageStatus(webhook: GreenAPIWebhook) {
  const { statusData } = webhook
  
  if (!statusData) {
    console.log('Missing status data')
    return
  }

  const messageId = statusData.idMessage
  const status = statusData.status

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const { error } = await supabase
    .from('chat_messages')
    .update({ 
      message_status: status as any // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É message_status
    })
    .eq('green_api_message_id', messageId)

  if (error) {
    console.error('Error updating message status:', error)
    throw error
  }

  console.log(`Updated message ${messageId} status to ${status}`)
}

async function handleOutgoingMessage(webhook: GreenAPIWebhook) {
  // –°–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏—Ö –≤ CRM
  const { senderData, messageData, idMessage } = webhook
  
  if (!senderData || !messageData) {
    console.log('Missing sender or message data in outgoing message')
    return
  }

  const chatId = senderData.chatId
  const phoneNumber = extractPhoneFromChatId(chatId)
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  let client = await findOrCreateClient(phoneNumber, senderData.chatName)
  
  let messageText = ''
  switch (messageData.typeMessage) {
    case 'textMessage':
      messageText = messageData.textMessageData?.textMessage || ''
      break
    case 'extendedTextMessage':
      messageText = messageData.extendedTextMessageData?.text || ''
      break
    default:
      messageText = `[${messageData.typeMessage}]`
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–µ–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const { error } = await supabase.from('chat_messages').insert({
    client_id: client.id,
    message_text: messageText,
    message_type: 'manager',
    messenger_type: 'whatsapp',
    message_status: 'sent',
    green_api_message_id: idMessage,
    is_outgoing: true,
    is_read: true,
    created_at: new Date(webhook.timestamp * 1000).toISOString()
  })

  if (error) {
    console.error('Error saving outgoing message:', error)
    throw error
  }

  console.log(`Saved outgoing message to ${phoneNumber}: ${messageText}`)
}

async function handleStateChange(webhook: GreenAPIWebhook) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç.–¥.)
  console.log('State change:', webhook)
  
  // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
  const state = (webhook as any).stateInstance
  
  await supabase
    .from('messenger_settings')
    .upsert({
      messenger_type: 'whatsapp',
      settings: {
        instance_state: state,
        last_state_change: new Date().toISOString()
      },
      updated_at: new Date().toISOString()
    })
}

async function handleIncomingCall(webhook: GreenAPIWebhook) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
  const callData = (webhook as any)
  const phoneNumber = extractPhoneFromChatId(callData.from)
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
  const { data: client } = await supabase
    .from('clients')
    .select('*')
    .eq('phone', phoneNumber)
    .single()

  if (client) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ
    await supabase.from('chat_messages').insert({
      client_id: client.id,
      message_text: `üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (${callData.status || 'unknown'})`,
      message_type: 'system',
      messenger_type: 'whatsapp',
      message_status: 'delivered',
      is_outgoing: false,
      is_read: false,
      call_duration: callData.status === 'pickUp' ? '0' : null,
      created_at: new Date(webhook.timestamp * 1000).toISOString()
    })
    
    console.log(`Recorded call from ${phoneNumber} with status ${callData.status}`)
  }
}

async function findOrCreateClient(phoneNumber: string, displayName?: string) {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const { data: existingClient } = await supabase
    .from('clients')
    .select('*')
    .eq('phone', phoneNumber)
    .single()

  if (existingClient) {
    // –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—ë –∏–∑ WhatsApp
    if (!existingClient.avatar_url) {
      const avatarUrl = await fetchAndSaveAvatar(phoneNumber, existingClient.id)
      if (avatarUrl) {
        await supabase
          .from('clients')
          .update({ avatar_url: avatarUrl })
          .eq('id', existingClient.id)
        existingClient.avatar_url = avatarUrl
      }
    }
    return existingClient
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const { data: newClient, error } = await supabase
    .from('clients')
    .insert({
      name: displayName || phoneNumber,
      phone: phoneNumber,
      notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏–∑ WhatsApp',
      whatsapp_chat_id: `${phoneNumber.replace('+', '')}@c.us`
    })
    .select()
    .single()

  if (error) {
    console.error('Error creating client:', error)
    throw error
  }

  console.log(`Created new client: ${newClient.name} (${phoneNumber})`)

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const avatarUrl = await fetchAndSaveAvatar(phoneNumber, newClient.id)
  if (avatarUrl) {
    await supabase
      .from('clients')
      .update({ avatar_url: avatarUrl })
      .eq('id', newClient.id)
    newClient.avatar_url = avatarUrl
  }

  return newClient
}

async function fetchAndSaveAvatar(phoneNumber: string, clientId: string): Promise<string | null> {
  try {
    const greenApiId = Deno.env.get('GREEN_API_ID_INSTANCE')
    const greenApiToken = Deno.env.get('GREEN_API_TOKEN_INSTANCE')
    const greenApiUrl = Deno.env.get('GREEN_API_URL')

    if (!greenApiId || !greenApiToken || !greenApiUrl) {
      console.log('Green API credentials not configured')
      return null
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º chatId
    const chatId = `${phoneNumber.replace('+', '')}@c.us`
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ —á–µ—Ä–µ–∑ Green API
    const contactInfoUrl = `${greenApiUrl}/waInstance${greenApiId}/getContactInfo/${greenApiToken}`
    
    console.log(`Fetching contact info for ${chatId}`)
    
    const contactResponse = await fetch(contactInfoUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ chatId })
    })

    if (!contactResponse.ok) {
      console.log(`Failed to get contact info: ${contactResponse.status}`)
      return null
    }

    const contactData = await contactResponse.json()
    
    if (!contactData.avatar) {
      console.log(`No avatar found for ${phoneNumber}`)
      return null
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    console.log(`Downloading avatar from: ${contactData.avatar}`)
    
    const avatarResponse = await fetch(contactData.avatar)
    if (!avatarResponse.ok) {
      console.log(`Failed to download avatar: ${avatarResponse.status}`)
      return null
    }

    const avatarBlob = await avatarResponse.arrayBuffer()
    const fileName = `avatar_${clientId}_${Date.now()}.jpg`
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(fileName, avatarBlob, {
        contentType: 'image/jpeg',
        upsert: true
      })

    if (uploadError) {
      console.error('Error uploading avatar:', uploadError)
      return null
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: publicUrlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(fileName)

    console.log(`Avatar saved for ${phoneNumber}: ${publicUrlData.publicUrl}`)
    return publicUrlData.publicUrl

  } catch (error) {
    console.error('Error fetching avatar:', error)
    return null
  }
}

function extractPhoneFromChatId(chatId: string): string {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ chatId –≤–∏–¥–∞ "79876543210@c.us"
  const match = chatId.match(/^(\d+)@c\.us$/)
  if (match) {
    const phoneNumber = match[1]
    // –î–æ–±–∞–≤–ª—è–µ–º + –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if (phoneNumber.startsWith('7') && phoneNumber.length === 11) {
      return `+${phoneNumber}`
    }
    return `+${phoneNumber}`
  }
  return chatId // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
}