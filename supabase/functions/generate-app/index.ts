import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const GENERATION_SYSTEM = `–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï, –ü–†–û–î–£–ú–ê–ù–ù–´–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ø–æ–¥ –∫–ª—é—á", –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

üéØ –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:
1. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –í—Å–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫
2. UX/UI: –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω
3. –ü–ï–î–ê–ì–û–ì–ò–ö–ê: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
4. –ó–ê–í–ï–†–®–ï–ù–ù–û–°–¢–¨: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üìã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:

–î–ª—è QUIZ/TEST:
- –ß–µ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
- –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (‚úì/‚úó)
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
- –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫

–î–ª—è GAME/CROSSWORD:
- –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫/–≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã)
- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (hint button)
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–î–ª—è FLASHCARDS:
- –ú–∏–Ω–∏–º—É–º 10-15 –∫–∞—Ä—Ç–æ—á–µ–∫
- –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
- Shuffle —Ñ—É–Ω–∫—Ü–∏—è
- –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è

–î–ª—è MATCHING:
- Drag & drop –∏–ª–∏ click-to-match
- –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä
- –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

–î–ª—è DRAG-AND-DROP (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤):
- Drop zones –≤—Å—Ç—Ä–æ–µ–Ω—ã –í–ù–£–¢–†–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
- Draggable —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É
- –ü—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è —Ü–≤–µ—Ç–æ–º
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ resize/fullscreen
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout —Å overflow: auto –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤

–î–ª—è FILL-IN-BLANKS:
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

–î–ª—è WORD-SEARCH:
- ‚ö†Ô∏è –ê–ë–°–û–õ–Æ–¢–ù–û–ï –ü–†–ê–í–ò–õ–û: –ó–ê–ü–†–ï–©–ï–ù–´ —Ñ—Ä–∞–∑—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:
  * ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: "has", "have", "hasn't", "haven't", "hash", "haven", "hasten"
  * ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "has been", "have fun", "has a point", "have a look"
  * –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ—Ä–∞–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ò–ù–û–ß–ù–´–ï —Å–ª–æ–≤–∞
- –í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–µ—Ç–∫–µ
- –°–ª–æ–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ
- –í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –≤ —Å–ø–∏—Å–∫–µ
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–µ
- –ú–∏–Ω–∏–º—É–º 10-15 –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞

–î–ª—è MEMORY:
- –ü–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–∏–Ω–∏–º—É–º 12 –ø–∞—Ä)
- –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
- –¢–∞–π–º–µ—Ä

üé® –î–ò–ó–ê–ô–ù –ò UX:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —è—Ä–∫–∏–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
- –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (transitions, transforms)
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout (mobile-first) - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ flexbox/grid –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞—Ä—Ç–æ—á–∫–∏) –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (%, rem, em) –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º (flexbox —Å gap)
- –ß–µ—Ç–∫–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ (–±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏, —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç)
- –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (–∑–µ–ª–µ–Ω—ã–π=–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∫—Ä–∞—Å–Ω—ã–π=–æ—à–∏–±–∫–∞)
- Loading states –∏ feedback –Ω–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å—Ç–∫—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞ (320px, 768px, 1024px, 1920px)

‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. Self-contained: –í–°–Å –≤ –æ–¥–Ω–æ–º HTML —Ñ–∞–π–ª–µ
2. –ù–ï–¢ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (CDN, fetch, images URLs)
3. –¢–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ API
4. –í–∞–ª–∏–¥–Ω—ã–π, —á–∏—Å—Ç—ã–π –∫–æ–¥
5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
6. Semantic HTML5 (header, main, section, article)
7. Accessibility (ARIA labels, keyboard navigation)

‚è±Ô∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- –¢–∞–π–º–µ—Ä (–µ—Å–ª–∏ has_timer: true) —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–µ—Å–ª–∏ has_hints: true)
- –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ has_results: true):
  * –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  * –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
  * –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"

üìä –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏—Ç—å window.__GAME_META:
window.__GAME_META = {
  title: "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
  type: "game|quiz|trainer|checker|tool",
  description: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
  grammar_points: ["—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º"],
  vocabulary: ["–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫—Å–∏–∫–∏"],
  skills: ["reading", "writing", "listening", "speaking"],
  level: "A1|A2|B1|B2|C1|C2",
  duration_minutes: —á–∏—Å–ª–æ,
  has_timer: true/false,
  has_hints: true/false,
  has_results: true
};

üìÖ COPYRIGHT: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ:
- ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: ¬© <script>document.write(new Date().getFullYear())</script> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –≥–æ–¥–∞
- ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: ¬© 2023, ¬© 2024 (–∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–¥—ã)

üî• –ü–†–ò–ú–ï–†–´ –ö–ê–ß–ï–°–¢–í–ê:

–ü–õ–û–•–û (–∫—Ä–æ—Å—Å–≤–æ—Ä–¥):
- –°–µ—Ç–∫–∞ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
- –í—Å–µ —è—á–µ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã
- –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤

–•–û–†–û–®–û (–∫—Ä–æ—Å—Å–≤–æ—Ä–¥):
- –ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏/–≤–µ—Ä—Ç–∏–∫–∞–ª–∏
- –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–≤–æ–¥–∞
- –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
- –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Å–∫–∞–∑–∫–∞" –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω—É –±—É–∫–≤—É
- –¢–∞–π–º–µ—Ä –∏ —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤

–ü–õ–û–•–û (drag-and-drop):
- Drop zones —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
- –ù–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –∫—É–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ resize
- Overflow —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞

–•–û–†–û–®–û (drag-and-drop):
- Drop zones –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: "___ you like ice cream?"
- Draggable —ç–ª–µ–º–µ–Ω—Ç—ã ("do", "does") –≤ –ø–∞–Ω–µ–ª–∏ —Å–≤–µ—Ä—Ö—É
- –ü—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è: "Do you like ice cream?"
- –ó–µ–ª–µ–Ω–∞—è/–∫—Ä–∞—Å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
- overflow-y: auto –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç DOM

–í–ê–ñ–ù–û:
- –ù–ï –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ placeholder'—ã –∏–ª–∏ TODO
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–ª—É–ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
- –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

–û—Ç–≤–µ—Ç—å—Ç–µ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–º HTML –∫–æ–¥–æ–º, –±–µ–∑ markdown –±–ª–æ–∫–æ–≤.`;

async function getEmbedding(text: string): Promise<number[]> {
  const response = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'text-embedding-3-small',
      input: text.slice(0, 8000)
    })
  });

  const data = await response.json();
  return data.data[0].embedding;
}

function extractMeta(html: string): any {
  const metaMatch = html.match(/window\.__GAME_META\s*=\s*({[\s\S]*?});/);
  if (metaMatch) {
    try {
      return JSON.parse(metaMatch[1]);
    } catch (e) {
      console.error('Failed to parse meta:', e);
    }
  }
  return {};
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { teacher_id, prompt, app_id } = await req.json();
    console.log('Generate app request:', { teacher_id, prompt, app_id });

    if (!teacher_id || !prompt) {
      console.error('Missing required fields:', { teacher_id, prompt });
      return new Response(
        JSON.stringify({ error: 'teacher_id and prompt are required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY not configured');
      return new Response(
        JSON.stringify({ error: 'OPENAI_API_KEY is not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get teacher info by either teacher.id or profile_id
    const { data: teacher, error: teacherError } = await supabase
      .from('teachers')
      .select('id, profile_id')
      .or(`id.eq.${teacher_id},profile_id.eq.${teacher_id}`)
      .maybeSingle();

    if (teacherError) {
      console.error('Teacher lookup error:', teacherError);
      return new Response(
        JSON.stringify({ error: `Teacher lookup failed: ${teacherError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!teacher) {
      console.error('Teacher not found for profile_id:', teacher_id);
      return new Response(
        JSON.stringify({ error: 'Teacher profile not found' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Get organization_id from teacher.profile_id
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('organization_id')
      .eq('id', teacher.profile_id)
      .maybeSingle();

    if (profileError) {
      console.error('Profile lookup error:', profileError);
      return new Response(
        JSON.stringify({ error: `Profile lookup failed: ${profileError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!profile?.organization_id) {
      console.error('Organization not found for profile:', teacher_id);
      return new Response(
        JSON.stringify({ error: 'Organization not found for profile' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Map English types to Russian for better generation
    const typeMapping: Record<string, string> = {
      'quiz': '–∫–≤–∏–∑',
      'game': '–∏–≥—Ä—É',
      'flashcards': '—Ñ–ª—ç—à-–∫–∞—Ä—Ç–æ—á–∫–∏',
      'matching': '–∏–≥—Ä—É –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ',
      'wordSearch': '–∏–≥—Ä—É "–ø–æ–∏—Å–∫ —Å–ª–æ–≤"',
      'fillInBlanks': '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–∏"',
      'memory': '–∏–≥—Ä—É "–º–µ–º–æ—Ä–∏" (–Ω–∞–π–¥–∏ –ø–∞—Ä—ã)',
      'dragAndDrop': '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º',
      'test': '—Ç–µ—Å—Ç',
      'crossword': '–∫—Ä–æ—Å—Å–≤–æ—Ä–¥',
      'typing': '—Ç—Ä–µ–Ω–∞–∂–µ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞'
    };

    const gameType = typeMapping[prompt.type] || prompt.type || '–∏–≥—Ä—É';

    // Generate HTML with OpenAI
    const userPrompt = `
–°–æ–∑–¥–∞–π—Ç–µ ${gameType} –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:

–ù–∞–∑–≤–∞–Ω–∏–µ: ${prompt.title || 'Educational App'}
–£—Ä–æ–≤–µ–Ω—å: ${prompt.level || 'A1-B1'}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${prompt.duration || 10} –º–∏–Ω—É—Ç
–û–ø–∏—Å–∞–Ω–∏–µ: ${prompt.brief}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
${prompt.features ? prompt.features.map((f: string) => `- ${f}`).join('\n') : ''}

–°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
`;

    console.log('Calling OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: GENERATION_SYSTEM },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      return new Response(
        JSON.stringify({ error: `OpenAI API error: ${response.status}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const aiData = await response.json();
    let html = aiData.choices[0].message?.content || '';
    console.log('Generated HTML length:', html.length);

    // Remove markdown code blocks if present
    html = html.replace(/```html\n?/g, '').replace(/```\n?/g, '');

    // Extract metadata
    const meta = extractMeta(html);

    // Create or update app
    let appData;
    let version = 1;

    if (app_id) {
      // Update existing app
      const { data: existingApp } = await supabase
        .from('apps')
        .select('latest_version')
        .eq('id', app_id)
        .single();

      version = (existingApp?.latest_version || 0) + 1;

      await supabase
        .from('apps')
        .update({ 
          latest_version: version,
          updated_at: new Date().toISOString()
        })
        .eq('id', app_id);

      appData = { id: app_id };
    } else {
      // Create new app
      const title = meta.title || prompt.title || 'Untitled App';
      const description = prompt.description || meta.description || prompt.brief || 'No description provided';
      const embedding = await getEmbedding(`${title} ${description}`);

      const { data: newApp, error: appError } = await supabase
        .from('apps')
        .insert({
          author_id: teacher.id,
          organization_id: profile.organization_id,
          title,
          kind: prompt.type || 'game',
          description,
          level: prompt.level || meta.level || 'A1',
          status: 'draft',
          embedding
        })
        .select()
        .single();

      if (appError) throw appError;
      appData = newApp;
    }

    // Save HTML to storage
    const fileName = `${appData.id}/${version}/index.html`;
    const htmlBlob = new Blob([html], { type: 'text/html; charset=utf-8' });
    const { error: uploadError } = await supabase.storage
      .from('apps')
      .upload(fileName, htmlBlob, {
        contentType: 'text/html; charset=utf-8',
        upsert: true
      });

    if (uploadError) throw uploadError;

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('apps')
      .getPublicUrl(fileName);

    // Save version
    await supabase
      .from('app_versions')
      .insert({
        app_id: appData.id,
        version,
        prompt,
        model: 'gpt-4o',
        artifact_path: fileName,
        preview_url: urlData.publicUrl,
        meta
      });

    return new Response(
      JSON.stringify({
        app_id: appData.id,
        version,
        preview_url: urlData.publicUrl,
        meta
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-app:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
